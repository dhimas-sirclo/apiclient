/*
 * SIRCLO Open API
 * SIRCLO Open API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@sirclo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * OpenAPI generator version: 7.0.0
 */

import http from "k6/http";
import { group, check, sleep } from "k6";

const BASE_URL = "https://api.connexi.id/v1/open/api";
// Sleep duration between successive requests.
// You might want to edit the value of this variable or remove calls to the sleep function on the script.
const SLEEP_DURATION = 0.1;
// Global variables should be initialized.
const CHANNEL_CODE = "gom";

export default function () {
  group("/saleschannel/register", () => {
    // Request No. 1: registerSalesChannel
    // {
    let url = BASE_URL + `/saleschannel/register`;
    // TODO: edit the parameters of the request body.
    let body = {
      appName: "string",
      appChannelCode: "string",
      type: "string",
      urlInfo: {
        urlChannel: "string",
        urlHelpPage: "string",
        urlLogoChannel: "string",
        urlSquareLogoChannel: "string",
      },
      urlWebhook: {
        urlConnect: "string",
        urlAcceptedOrder: "string",
        urlPackedOrder: "string",
        urlShippedOrder: "string",
        urlCompletedOrder: "string",
        urlCancelledOrder: "string",
        urlUpdateStock: "string",
        urlUpsertProduct: "string",
      },
    };
    let params = {
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
    };
    let request = http.post(url, JSON.stringify(body), params);

    check(request, {
      Error: (r) => r.status === 200,
    });
    check(request, {
      OK: (r) => r.status === 200,
    });
    // }
  });

  group("/orders/upsert/{channelCode}", () => {
    let channelCode = CHANNEL_CODE; // specify value as there is no example value for this parameter in OpenAPI spec

    // Request No. 1: upsertOrders
    {
      let url = BASE_URL + `/orders/upsert/${channelCode}`;
      let params = {
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
      };
      let request = http.post(url, params);

      check(request, {
        Error: (r) => r.status === 200,
      });
      check(request, {
        OK: (r) => r.status === 200,
      });
    }
  });

  group("/categories/upsert/{channelCode}", () => {
    let channelCode = CHANNEL_CODE; // specify value as there is no example value for this parameter in OpenAPI spec

    // Request No. 1: upsertProductCategories
    {
      let url = BASE_URL + `/categories/upsert/${channelCode}`;
      let params = {
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
      };
      let request = http.post(url, params);

      check(request, {
        Error: (r) => r.status === 200,
      });
      check(request, {
        OK: (r) => r.status === 200,
      });
    }
  });

  group("/products/upsert/{channelCode}", () => {
    let channelCode = CHANNEL_CODE; // specify value as there is no example value for this parameter in OpenAPI spec

    // Request No. 1: upsertProducts
    {
      let url = BASE_URL + `/products/upsert/${channelCode}`;
      let params = {
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
      };
      let request = http.post(url, params);

      check(request, {
        Error: (r) => r.status === 200,
      });
      check(request, {
        OK: (r) => r.status === 200,
      });
    }
  });

  group("/saleschannel/update/{channelCode}", () => {
    let channelCode = CHANNEL_CODE; // specify value as there is no example value for this parameter in OpenAPI spec

    // Request No. 1: updateSalesChannel
    {
      let url = BASE_URL + `/saleschannel/update/${channelCode}`;
      // TODO: edit the parameters of the request body.
      let body = {
        type: "string",
        urlInfo: {
          urlChannel: "string",
          urlHelpPage: "string",
          urlLogoChannel: "string",
          urlSquareLogoChannel: "string",
          urlOauth2: "string",
        },
        urlWebhook: {
          urlConnect: "string",
          urlDisconnect: "string",
          urlAcceptedOrder: "string",
          urlPackedOrder: "string",
          urlShippedOrder: "string",
          urlCompletedOrder: "string",
          urlCancelledOrder: "string",
          urlUpdateStock: "string",
          urlBulkUpdateStock: "string",
          urlUpsertProduct: "string",
          urlFetchProduct: "string",
          urlFetchOrder: "string",
          urlConnectOauth2: "string",
          urlUpdatePrice: "string",
          urlBulkUpdatePrice: "string",
          urlCreateDiscount: "string",
          urlDeleteDiscount: "string",
        },
      };
      let params = {
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
      };
      let request = http.post(url, JSON.stringify(body), params);

      check(request, {
        Error: (r) => r.status === 200,
      });
      check(request, {
        OK: (r) => r.status === 200,
      });
    }
  });
}
