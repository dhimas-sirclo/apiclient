/*
 * MP Connector API
 *
 * MP Connector API
 *
 * API version: v1.0.0
 * Contact: dev@sirclo.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package connector

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name		string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method		string
	// Pattern is the pattern of the URI.
	Pattern	 	string
	// HandlerFunc is the handler function of this route.
	HandlerFunc	gin.HandlerFunc
}

// NewRouter returns a new router.
func NewRouter(handleFunctions ApiHandleFunctions) *gin.Engine {
	router := gin.Default()
	for _, route := range getRoutes(handleFunctions) {
		if route.HandlerFunc == nil {
			route.HandlerFunc = DefaultHandleFunc
		}
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodPatch:
			router.PATCH(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

// Default handler for not yet implemented routes
func DefaultHandleFunc(c *gin.Context) {
	c.String(http.StatusNotImplemented, "501 not implemented")
}

type ApiHandleFunctions struct {

	// Routes for the InventoryAPI part of the API
	InventoryAPI InventoryAPI
	// Routes for the OrderAPI part of the API
	OrderAPI OrderAPI
	// Routes for the ProductAPI part of the API
	ProductAPI ProductAPI
	// Routes for the ShopAPI part of the API
	ShopAPI ShopAPI
}

func getRoutes(handleFunctions ApiHandleFunctions) []Route {
	return []Route{
	
		{
			"UpdateStock",
			http.MethodPost,
			"/v1/inventory/update",
			handleFunctions.InventoryAPI.UpdateStock,
		},
		{
			"AcceptOrder",
			http.MethodPost,
			"/v1/orders/accept",
			handleFunctions.OrderAPI.AcceptOrder,
		},
		{
			"CancelOrder",
			http.MethodPost,
			"/v1/orders/cancel",
			handleFunctions.OrderAPI.CancelOrder,
		},
		{
			"CompleteOrder",
			http.MethodPost,
			"/v1/orders/complete",
			handleFunctions.OrderAPI.CompleteOrder,
		},
		{
			"NewOrder",
			http.MethodPost,
			"/v1/orders/new",
			handleFunctions.OrderAPI.NewOrder,
		},
		{
			"OrderAccepted",
			http.MethodPost,
			"/v1/orders/accepted",
			handleFunctions.OrderAPI.OrderAccepted,
		},
		{
			"OrderCancelled",
			http.MethodPost,
			"/v1/orders/cancelled",
			handleFunctions.OrderAPI.OrderCancelled,
		},
		{
			"OrderCompleted",
			http.MethodPost,
			"/v1/orders/completed",
			handleFunctions.OrderAPI.OrderCompleted,
		},
		{
			"OrderPacked",
			http.MethodPost,
			"/v1/orders/packed",
			handleFunctions.OrderAPI.OrderPacked,
		},
		{
			"OrderShipped",
			http.MethodPost,
			"/v1/orders/shipped",
			handleFunctions.OrderAPI.OrderShipped,
		},
		{
			"PackOrder",
			http.MethodPost,
			"/v1/orders/pack",
			handleFunctions.OrderAPI.PackOrder,
		},
		{
			"ShipOrder",
			http.MethodPost,
			"/v1/orders/ship",
			handleFunctions.OrderAPI.ShipOrder,
		},
		{
			"DeleteProducts",
			http.MethodPost,
			"/v1/products/delete",
			handleFunctions.ProductAPI.DeleteProducts,
		},
		{
			"FetchProduct",
			http.MethodPost,
			"/v1/products/fetch",
			handleFunctions.ProductAPI.FetchProduct,
		},
		{
			"UpdateProductStatus",
			http.MethodPost,
			"/v1/products/status",
			handleFunctions.ProductAPI.UpdateProductStatus,
		},
		{
			"UpsertProduct",
			http.MethodPost,
			"/v1/products/upsert",
			handleFunctions.ProductAPI.UpsertProduct,
		},
		{
			"Connect",
			http.MethodPost,
			"/v1/shop/connect",
			handleFunctions.ShopAPI.Connect,
		},
		{
			"Disconnect",
			http.MethodPost,
			"/v1/shop/disconnect",
			handleFunctions.ShopAPI.Disconnect,
		},
	}
}
