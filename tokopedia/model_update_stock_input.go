/*
Tokopedia API

Tokopedia API

API version: 1.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokopedia

import (
	"encoding/json"
)

// checks if the UpdateStockInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateStockInput{}

// UpdateStockInput struct for UpdateStockInput
type UpdateStockInput struct {
	Sku *string `json:"sku,omitempty"`
	ProductId *int64 `json:"product_id,omitempty"`
	NewStock int64 `json:"new_stock"`
}

// NewUpdateStockInput instantiates a new UpdateStockInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateStockInput(newStock int64) *UpdateStockInput {
	this := UpdateStockInput{}
	this.NewStock = newStock
	return &this
}

// NewUpdateStockInputWithDefaults instantiates a new UpdateStockInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateStockInputWithDefaults() *UpdateStockInput {
	this := UpdateStockInput{}
	return &this
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *UpdateStockInput) GetSku() string {
	if o == nil || IsNil(o.Sku) {
		var ret string
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStockInput) GetSkuOk() (*string, bool) {
	if o == nil || IsNil(o.Sku) {
		return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *UpdateStockInput) HasSku() bool {
	if o != nil && !IsNil(o.Sku) {
		return true
	}

	return false
}

// SetSku gets a reference to the given string and assigns it to the Sku field.
func (o *UpdateStockInput) SetSku(v string) {
	o.Sku = &v
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *UpdateStockInput) GetProductId() int64 {
	if o == nil || IsNil(o.ProductId) {
		var ret int64
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStockInput) GetProductIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *UpdateStockInput) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given int64 and assigns it to the ProductId field.
func (o *UpdateStockInput) SetProductId(v int64) {
	o.ProductId = &v
}

// GetNewStock returns the NewStock field value
func (o *UpdateStockInput) GetNewStock() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.NewStock
}

// GetNewStockOk returns a tuple with the NewStock field value
// and a boolean to check if the value has been set.
func (o *UpdateStockInput) GetNewStockOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewStock, true
}

// SetNewStock sets field value
func (o *UpdateStockInput) SetNewStock(v int64) {
	o.NewStock = v
}

func (o UpdateStockInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateStockInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Sku) {
		toSerialize["sku"] = o.Sku
	}
	if !IsNil(o.ProductId) {
		toSerialize["product_id"] = o.ProductId
	}
	toSerialize["new_stock"] = o.NewStock
	return toSerialize, nil
}

type NullableUpdateStockInput struct {
	value *UpdateStockInput
	isSet bool
}

func (v NullableUpdateStockInput) Get() *UpdateStockInput {
	return v.value
}

func (v *NullableUpdateStockInput) Set(val *UpdateStockInput) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateStockInput) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateStockInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateStockInput(val *UpdateStockInput) *NullableUpdateStockInput {
	return &NullableUpdateStockInput{value: val, isSet: true}
}

func (v NullableUpdateStockInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateStockInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


