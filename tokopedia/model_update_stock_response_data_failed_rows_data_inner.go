/*
Tokopedia API

Tokopedia API

API version: 1.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokopedia

import (
	"encoding/json"
)

// checks if the UpdateStockResponseDataFailedRowsDataInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateStockResponseDataFailedRowsDataInner{}

// UpdateStockResponseDataFailedRowsDataInner struct for UpdateStockResponseDataFailedRowsDataInner
type UpdateStockResponseDataFailedRowsDataInner struct {
	ProductId *int64 `json:"product_id,omitempty"`
	Sku *string `json:"sku,omitempty"`
	ProductUrl *string `json:"product_url,omitempty"`
	NewStock *int64 `json:"new_stock,omitempty"`
	Message *string `json:"message,omitempty"`
}

// NewUpdateStockResponseDataFailedRowsDataInner instantiates a new UpdateStockResponseDataFailedRowsDataInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateStockResponseDataFailedRowsDataInner() *UpdateStockResponseDataFailedRowsDataInner {
	this := UpdateStockResponseDataFailedRowsDataInner{}
	return &this
}

// NewUpdateStockResponseDataFailedRowsDataInnerWithDefaults instantiates a new UpdateStockResponseDataFailedRowsDataInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateStockResponseDataFailedRowsDataInnerWithDefaults() *UpdateStockResponseDataFailedRowsDataInner {
	this := UpdateStockResponseDataFailedRowsDataInner{}
	return &this
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *UpdateStockResponseDataFailedRowsDataInner) GetProductId() int64 {
	if o == nil || IsNil(o.ProductId) {
		var ret int64
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStockResponseDataFailedRowsDataInner) GetProductIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *UpdateStockResponseDataFailedRowsDataInner) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given int64 and assigns it to the ProductId field.
func (o *UpdateStockResponseDataFailedRowsDataInner) SetProductId(v int64) {
	o.ProductId = &v
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *UpdateStockResponseDataFailedRowsDataInner) GetSku() string {
	if o == nil || IsNil(o.Sku) {
		var ret string
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStockResponseDataFailedRowsDataInner) GetSkuOk() (*string, bool) {
	if o == nil || IsNil(o.Sku) {
		return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *UpdateStockResponseDataFailedRowsDataInner) HasSku() bool {
	if o != nil && !IsNil(o.Sku) {
		return true
	}

	return false
}

// SetSku gets a reference to the given string and assigns it to the Sku field.
func (o *UpdateStockResponseDataFailedRowsDataInner) SetSku(v string) {
	o.Sku = &v
}

// GetProductUrl returns the ProductUrl field value if set, zero value otherwise.
func (o *UpdateStockResponseDataFailedRowsDataInner) GetProductUrl() string {
	if o == nil || IsNil(o.ProductUrl) {
		var ret string
		return ret
	}
	return *o.ProductUrl
}

// GetProductUrlOk returns a tuple with the ProductUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStockResponseDataFailedRowsDataInner) GetProductUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ProductUrl) {
		return nil, false
	}
	return o.ProductUrl, true
}

// HasProductUrl returns a boolean if a field has been set.
func (o *UpdateStockResponseDataFailedRowsDataInner) HasProductUrl() bool {
	if o != nil && !IsNil(o.ProductUrl) {
		return true
	}

	return false
}

// SetProductUrl gets a reference to the given string and assigns it to the ProductUrl field.
func (o *UpdateStockResponseDataFailedRowsDataInner) SetProductUrl(v string) {
	o.ProductUrl = &v
}

// GetNewStock returns the NewStock field value if set, zero value otherwise.
func (o *UpdateStockResponseDataFailedRowsDataInner) GetNewStock() int64 {
	if o == nil || IsNil(o.NewStock) {
		var ret int64
		return ret
	}
	return *o.NewStock
}

// GetNewStockOk returns a tuple with the NewStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStockResponseDataFailedRowsDataInner) GetNewStockOk() (*int64, bool) {
	if o == nil || IsNil(o.NewStock) {
		return nil, false
	}
	return o.NewStock, true
}

// HasNewStock returns a boolean if a field has been set.
func (o *UpdateStockResponseDataFailedRowsDataInner) HasNewStock() bool {
	if o != nil && !IsNil(o.NewStock) {
		return true
	}

	return false
}

// SetNewStock gets a reference to the given int64 and assigns it to the NewStock field.
func (o *UpdateStockResponseDataFailedRowsDataInner) SetNewStock(v int64) {
	o.NewStock = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *UpdateStockResponseDataFailedRowsDataInner) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStockResponseDataFailedRowsDataInner) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *UpdateStockResponseDataFailedRowsDataInner) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *UpdateStockResponseDataFailedRowsDataInner) SetMessage(v string) {
	o.Message = &v
}

func (o UpdateStockResponseDataFailedRowsDataInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateStockResponseDataFailedRowsDataInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProductId) {
		toSerialize["product_id"] = o.ProductId
	}
	if !IsNil(o.Sku) {
		toSerialize["sku"] = o.Sku
	}
	if !IsNil(o.ProductUrl) {
		toSerialize["product_url"] = o.ProductUrl
	}
	if !IsNil(o.NewStock) {
		toSerialize["new_stock"] = o.NewStock
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

type NullableUpdateStockResponseDataFailedRowsDataInner struct {
	value *UpdateStockResponseDataFailedRowsDataInner
	isSet bool
}

func (v NullableUpdateStockResponseDataFailedRowsDataInner) Get() *UpdateStockResponseDataFailedRowsDataInner {
	return v.value
}

func (v *NullableUpdateStockResponseDataFailedRowsDataInner) Set(val *UpdateStockResponseDataFailedRowsDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateStockResponseDataFailedRowsDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateStockResponseDataFailedRowsDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateStockResponseDataFailedRowsDataInner(val *UpdateStockResponseDataFailedRowsDataInner) *NullableUpdateStockResponseDataFailedRowsDataInner {
	return &NullableUpdateStockResponseDataFailedRowsDataInner{value: val, isSet: true}
}

func (v NullableUpdateStockResponseDataFailedRowsDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateStockResponseDataFailedRowsDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


