/*
Tokopedia API

Tokopedia API

API version: 1.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokopedia

import (
	"encoding/json"
)

// checks if the WebhookProductDiscussionNewAnswerDiscussionData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookProductDiscussionNewAnswerDiscussionData{}

// WebhookProductDiscussionNewAnswerDiscussionData struct for WebhookProductDiscussionNewAnswerDiscussionData
type WebhookProductDiscussionNewAnswerDiscussionData struct {
	QuestionId *int64 `json:"question_id,omitempty"`
	ShopId *int64 `json:"shop_id,omitempty"`
	UserId *int64 `json:"user_id,omitempty"`
	UserFullName *string `json:"user_full_name,omitempty"`
	ProductId *int64 `json:"product_id,omitempty"`
	ProductName *string `json:"product_name,omitempty"`
	AnswerId *int64 `json:"answer_id,omitempty"`
	Message *string `json:"message,omitempty"`
}

// NewWebhookProductDiscussionNewAnswerDiscussionData instantiates a new WebhookProductDiscussionNewAnswerDiscussionData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookProductDiscussionNewAnswerDiscussionData() *WebhookProductDiscussionNewAnswerDiscussionData {
	this := WebhookProductDiscussionNewAnswerDiscussionData{}
	return &this
}

// NewWebhookProductDiscussionNewAnswerDiscussionDataWithDefaults instantiates a new WebhookProductDiscussionNewAnswerDiscussionData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookProductDiscussionNewAnswerDiscussionDataWithDefaults() *WebhookProductDiscussionNewAnswerDiscussionData {
	this := WebhookProductDiscussionNewAnswerDiscussionData{}
	return &this
}

// GetQuestionId returns the QuestionId field value if set, zero value otherwise.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) GetQuestionId() int64 {
	if o == nil || IsNil(o.QuestionId) {
		var ret int64
		return ret
	}
	return *o.QuestionId
}

// GetQuestionIdOk returns a tuple with the QuestionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) GetQuestionIdOk() (*int64, bool) {
	if o == nil || IsNil(o.QuestionId) {
		return nil, false
	}
	return o.QuestionId, true
}

// HasQuestionId returns a boolean if a field has been set.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) HasQuestionId() bool {
	if o != nil && !IsNil(o.QuestionId) {
		return true
	}

	return false
}

// SetQuestionId gets a reference to the given int64 and assigns it to the QuestionId field.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) SetQuestionId(v int64) {
	o.QuestionId = &v
}

// GetShopId returns the ShopId field value if set, zero value otherwise.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) GetShopId() int64 {
	if o == nil || IsNil(o.ShopId) {
		var ret int64
		return ret
	}
	return *o.ShopId
}

// GetShopIdOk returns a tuple with the ShopId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) GetShopIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ShopId) {
		return nil, false
	}
	return o.ShopId, true
}

// HasShopId returns a boolean if a field has been set.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) HasShopId() bool {
	if o != nil && !IsNil(o.ShopId) {
		return true
	}

	return false
}

// SetShopId gets a reference to the given int64 and assigns it to the ShopId field.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) SetShopId(v int64) {
	o.ShopId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) GetUserId() int64 {
	if o == nil || IsNil(o.UserId) {
		var ret int64
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) GetUserIdOk() (*int64, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int64 and assigns it to the UserId field.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) SetUserId(v int64) {
	o.UserId = &v
}

// GetUserFullName returns the UserFullName field value if set, zero value otherwise.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) GetUserFullName() string {
	if o == nil || IsNil(o.UserFullName) {
		var ret string
		return ret
	}
	return *o.UserFullName
}

// GetUserFullNameOk returns a tuple with the UserFullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) GetUserFullNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserFullName) {
		return nil, false
	}
	return o.UserFullName, true
}

// HasUserFullName returns a boolean if a field has been set.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) HasUserFullName() bool {
	if o != nil && !IsNil(o.UserFullName) {
		return true
	}

	return false
}

// SetUserFullName gets a reference to the given string and assigns it to the UserFullName field.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) SetUserFullName(v string) {
	o.UserFullName = &v
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) GetProductId() int64 {
	if o == nil || IsNil(o.ProductId) {
		var ret int64
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) GetProductIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given int64 and assigns it to the ProductId field.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) SetProductId(v int64) {
	o.ProductId = &v
}

// GetProductName returns the ProductName field value if set, zero value otherwise.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) GetProductName() string {
	if o == nil || IsNil(o.ProductName) {
		var ret string
		return ret
	}
	return *o.ProductName
}

// GetProductNameOk returns a tuple with the ProductName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) GetProductNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProductName) {
		return nil, false
	}
	return o.ProductName, true
}

// HasProductName returns a boolean if a field has been set.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) HasProductName() bool {
	if o != nil && !IsNil(o.ProductName) {
		return true
	}

	return false
}

// SetProductName gets a reference to the given string and assigns it to the ProductName field.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) SetProductName(v string) {
	o.ProductName = &v
}

// GetAnswerId returns the AnswerId field value if set, zero value otherwise.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) GetAnswerId() int64 {
	if o == nil || IsNil(o.AnswerId) {
		var ret int64
		return ret
	}
	return *o.AnswerId
}

// GetAnswerIdOk returns a tuple with the AnswerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) GetAnswerIdOk() (*int64, bool) {
	if o == nil || IsNil(o.AnswerId) {
		return nil, false
	}
	return o.AnswerId, true
}

// HasAnswerId returns a boolean if a field has been set.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) HasAnswerId() bool {
	if o != nil && !IsNil(o.AnswerId) {
		return true
	}

	return false
}

// SetAnswerId gets a reference to the given int64 and assigns it to the AnswerId field.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) SetAnswerId(v int64) {
	o.AnswerId = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *WebhookProductDiscussionNewAnswerDiscussionData) SetMessage(v string) {
	o.Message = &v
}

func (o WebhookProductDiscussionNewAnswerDiscussionData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookProductDiscussionNewAnswerDiscussionData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.QuestionId) {
		toSerialize["question_id"] = o.QuestionId
	}
	if !IsNil(o.ShopId) {
		toSerialize["shop_id"] = o.ShopId
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.UserFullName) {
		toSerialize["user_full_name"] = o.UserFullName
	}
	if !IsNil(o.ProductId) {
		toSerialize["product_id"] = o.ProductId
	}
	if !IsNil(o.ProductName) {
		toSerialize["product_name"] = o.ProductName
	}
	if !IsNil(o.AnswerId) {
		toSerialize["answer_id"] = o.AnswerId
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

type NullableWebhookProductDiscussionNewAnswerDiscussionData struct {
	value *WebhookProductDiscussionNewAnswerDiscussionData
	isSet bool
}

func (v NullableWebhookProductDiscussionNewAnswerDiscussionData) Get() *WebhookProductDiscussionNewAnswerDiscussionData {
	return v.value
}

func (v *NullableWebhookProductDiscussionNewAnswerDiscussionData) Set(val *WebhookProductDiscussionNewAnswerDiscussionData) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookProductDiscussionNewAnswerDiscussionData) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookProductDiscussionNewAnswerDiscussionData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookProductDiscussionNewAnswerDiscussionData(val *WebhookProductDiscussionNewAnswerDiscussionData) *NullableWebhookProductDiscussionNewAnswerDiscussionData {
	return &NullableWebhookProductDiscussionNewAnswerDiscussionData{value: val, isSet: true}
}

func (v NullableWebhookProductDiscussionNewAnswerDiscussionData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookProductDiscussionNewAnswerDiscussionData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


