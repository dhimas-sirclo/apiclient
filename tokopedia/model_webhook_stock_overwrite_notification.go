/*
Tokopedia API

Tokopedia API

API version: 1.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokopedia

import (
	"encoding/json"
)

// checks if the WebhookStockOverwriteNotification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookStockOverwriteNotification{}

// WebhookStockOverwriteNotification Stock Overwrite is notification that show information overwrite main stock into new value. This notification will be trigger when : - Edit Stock At Seller Dashboard - Hit Open API Edit Product Endpoint by change stock into new value 
type WebhookStockOverwriteNotification struct {
	FsId *int64 `json:"fs_id,omitempty"`
	ProductChangesData []WebhookStockOverwriteNotificationProductChangesDataInner `json:"product_changes_data,omitempty"`
}

// NewWebhookStockOverwriteNotification instantiates a new WebhookStockOverwriteNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookStockOverwriteNotification() *WebhookStockOverwriteNotification {
	this := WebhookStockOverwriteNotification{}
	return &this
}

// NewWebhookStockOverwriteNotificationWithDefaults instantiates a new WebhookStockOverwriteNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookStockOverwriteNotificationWithDefaults() *WebhookStockOverwriteNotification {
	this := WebhookStockOverwriteNotification{}
	return &this
}

// GetFsId returns the FsId field value if set, zero value otherwise.
func (o *WebhookStockOverwriteNotification) GetFsId() int64 {
	if o == nil || IsNil(o.FsId) {
		var ret int64
		return ret
	}
	return *o.FsId
}

// GetFsIdOk returns a tuple with the FsId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookStockOverwriteNotification) GetFsIdOk() (*int64, bool) {
	if o == nil || IsNil(o.FsId) {
		return nil, false
	}
	return o.FsId, true
}

// HasFsId returns a boolean if a field has been set.
func (o *WebhookStockOverwriteNotification) HasFsId() bool {
	if o != nil && !IsNil(o.FsId) {
		return true
	}

	return false
}

// SetFsId gets a reference to the given int64 and assigns it to the FsId field.
func (o *WebhookStockOverwriteNotification) SetFsId(v int64) {
	o.FsId = &v
}

// GetProductChangesData returns the ProductChangesData field value if set, zero value otherwise.
func (o *WebhookStockOverwriteNotification) GetProductChangesData() []WebhookStockOverwriteNotificationProductChangesDataInner {
	if o == nil || IsNil(o.ProductChangesData) {
		var ret []WebhookStockOverwriteNotificationProductChangesDataInner
		return ret
	}
	return o.ProductChangesData
}

// GetProductChangesDataOk returns a tuple with the ProductChangesData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookStockOverwriteNotification) GetProductChangesDataOk() ([]WebhookStockOverwriteNotificationProductChangesDataInner, bool) {
	if o == nil || IsNil(o.ProductChangesData) {
		return nil, false
	}
	return o.ProductChangesData, true
}

// HasProductChangesData returns a boolean if a field has been set.
func (o *WebhookStockOverwriteNotification) HasProductChangesData() bool {
	if o != nil && !IsNil(o.ProductChangesData) {
		return true
	}

	return false
}

// SetProductChangesData gets a reference to the given []WebhookStockOverwriteNotificationProductChangesDataInner and assigns it to the ProductChangesData field.
func (o *WebhookStockOverwriteNotification) SetProductChangesData(v []WebhookStockOverwriteNotificationProductChangesDataInner) {
	o.ProductChangesData = v
}

func (o WebhookStockOverwriteNotification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookStockOverwriteNotification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FsId) {
		toSerialize["fs_id"] = o.FsId
	}
	if !IsNil(o.ProductChangesData) {
		toSerialize["product_changes_data"] = o.ProductChangesData
	}
	return toSerialize, nil
}

type NullableWebhookStockOverwriteNotification struct {
	value *WebhookStockOverwriteNotification
	isSet bool
}

func (v NullableWebhookStockOverwriteNotification) Get() *WebhookStockOverwriteNotification {
	return v.value
}

func (v *NullableWebhookStockOverwriteNotification) Set(val *WebhookStockOverwriteNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookStockOverwriteNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookStockOverwriteNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookStockOverwriteNotification(val *WebhookStockOverwriteNotification) *NullableWebhookStockOverwriteNotification {
	return &NullableWebhookStockOverwriteNotification{value: val, isSet: true}
}

func (v NullableWebhookStockOverwriteNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookStockOverwriteNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


