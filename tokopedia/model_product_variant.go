/*
Tokopedia

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokopedia

import (
	"encoding/json"
)

// checks if the ProductVariant type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductVariant{}

// ProductVariant struct for ProductVariant
type ProductVariant struct {
	// Is Product Variant Parent?
	IsParent *bool `json:"isParent,omitempty"`
	// Is Product Has Variants?
	IsVariant *bool `json:"isVariant,omitempty"`
	// List of Product Variant ID
	ChildrenID []int32 `json:"childrenID,omitempty"`
}

// NewProductVariant instantiates a new ProductVariant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductVariant() *ProductVariant {
	this := ProductVariant{}
	return &this
}

// NewProductVariantWithDefaults instantiates a new ProductVariant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductVariantWithDefaults() *ProductVariant {
	this := ProductVariant{}
	return &this
}

// GetIsParent returns the IsParent field value if set, zero value otherwise.
func (o *ProductVariant) GetIsParent() bool {
	if o == nil || IsNil(o.IsParent) {
		var ret bool
		return ret
	}
	return *o.IsParent
}

// GetIsParentOk returns a tuple with the IsParent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariant) GetIsParentOk() (*bool, bool) {
	if o == nil || IsNil(o.IsParent) {
		return nil, false
	}
	return o.IsParent, true
}

// HasIsParent returns a boolean if a field has been set.
func (o *ProductVariant) HasIsParent() bool {
	if o != nil && !IsNil(o.IsParent) {
		return true
	}

	return false
}

// SetIsParent gets a reference to the given bool and assigns it to the IsParent field.
func (o *ProductVariant) SetIsParent(v bool) {
	o.IsParent = &v
}

// GetIsVariant returns the IsVariant field value if set, zero value otherwise.
func (o *ProductVariant) GetIsVariant() bool {
	if o == nil || IsNil(o.IsVariant) {
		var ret bool
		return ret
	}
	return *o.IsVariant
}

// GetIsVariantOk returns a tuple with the IsVariant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariant) GetIsVariantOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVariant) {
		return nil, false
	}
	return o.IsVariant, true
}

// HasIsVariant returns a boolean if a field has been set.
func (o *ProductVariant) HasIsVariant() bool {
	if o != nil && !IsNil(o.IsVariant) {
		return true
	}

	return false
}

// SetIsVariant gets a reference to the given bool and assigns it to the IsVariant field.
func (o *ProductVariant) SetIsVariant(v bool) {
	o.IsVariant = &v
}

// GetChildrenID returns the ChildrenID field value if set, zero value otherwise.
func (o *ProductVariant) GetChildrenID() []int32 {
	if o == nil || IsNil(o.ChildrenID) {
		var ret []int32
		return ret
	}
	return o.ChildrenID
}

// GetChildrenIDOk returns a tuple with the ChildrenID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductVariant) GetChildrenIDOk() ([]int32, bool) {
	if o == nil || IsNil(o.ChildrenID) {
		return nil, false
	}
	return o.ChildrenID, true
}

// HasChildrenID returns a boolean if a field has been set.
func (o *ProductVariant) HasChildrenID() bool {
	if o != nil && !IsNil(o.ChildrenID) {
		return true
	}

	return false
}

// SetChildrenID gets a reference to the given []int32 and assigns it to the ChildrenID field.
func (o *ProductVariant) SetChildrenID(v []int32) {
	o.ChildrenID = v
}

func (o ProductVariant) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductVariant) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsParent) {
		toSerialize["isParent"] = o.IsParent
	}
	if !IsNil(o.IsVariant) {
		toSerialize["isVariant"] = o.IsVariant
	}
	if !IsNil(o.ChildrenID) {
		toSerialize["childrenID"] = o.ChildrenID
	}
	return toSerialize, nil
}

type NullableProductVariant struct {
	value *ProductVariant
	isSet bool
}

func (v NullableProductVariant) Get() *ProductVariant {
	return v.value
}

func (v *NullableProductVariant) Set(val *ProductVariant) {
	v.value = val
	v.isSet = true
}

func (v NullableProductVariant) IsSet() bool {
	return v.isSet
}

func (v *NullableProductVariant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductVariant(val *ProductVariant) *NullableProductVariant {
	return &NullableProductVariant{value: val, isSet: true}
}

func (v NullableProductVariant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductVariant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


