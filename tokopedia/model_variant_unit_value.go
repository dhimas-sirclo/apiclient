/*
Tokopedia

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokopedia

import (
	"encoding/json"
)

// checks if the VariantUnitValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VariantUnitValue{}

// VariantUnitValue struct for VariantUnitValue
type VariantUnitValue struct {
	VariantUnitValueId *int64 `json:"variant_unit_value_id,omitempty"`
	Status *int64 `json:"status,omitempty"`
	Value *string `json:"value,omitempty"`
	EquivalentValueId *int64 `json:"equivalent_value_id,omitempty"`
	EnglishValue *string `json:"english_value,omitempty"`
	Hex *string `json:"hex,omitempty"`
	Icon *string `json:"icon,omitempty"`
}

// NewVariantUnitValue instantiates a new VariantUnitValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariantUnitValue() *VariantUnitValue {
	this := VariantUnitValue{}
	return &this
}

// NewVariantUnitValueWithDefaults instantiates a new VariantUnitValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariantUnitValueWithDefaults() *VariantUnitValue {
	this := VariantUnitValue{}
	return &this
}

// GetVariantUnitValueId returns the VariantUnitValueId field value if set, zero value otherwise.
func (o *VariantUnitValue) GetVariantUnitValueId() int64 {
	if o == nil || IsNil(o.VariantUnitValueId) {
		var ret int64
		return ret
	}
	return *o.VariantUnitValueId
}

// GetVariantUnitValueIdOk returns a tuple with the VariantUnitValueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantUnitValue) GetVariantUnitValueIdOk() (*int64, bool) {
	if o == nil || IsNil(o.VariantUnitValueId) {
		return nil, false
	}
	return o.VariantUnitValueId, true
}

// HasVariantUnitValueId returns a boolean if a field has been set.
func (o *VariantUnitValue) HasVariantUnitValueId() bool {
	if o != nil && !IsNil(o.VariantUnitValueId) {
		return true
	}

	return false
}

// SetVariantUnitValueId gets a reference to the given int64 and assigns it to the VariantUnitValueId field.
func (o *VariantUnitValue) SetVariantUnitValueId(v int64) {
	o.VariantUnitValueId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *VariantUnitValue) GetStatus() int64 {
	if o == nil || IsNil(o.Status) {
		var ret int64
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantUnitValue) GetStatusOk() (*int64, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *VariantUnitValue) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int64 and assigns it to the Status field.
func (o *VariantUnitValue) SetStatus(v int64) {
	o.Status = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *VariantUnitValue) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantUnitValue) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *VariantUnitValue) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *VariantUnitValue) SetValue(v string) {
	o.Value = &v
}

// GetEquivalentValueId returns the EquivalentValueId field value if set, zero value otherwise.
func (o *VariantUnitValue) GetEquivalentValueId() int64 {
	if o == nil || IsNil(o.EquivalentValueId) {
		var ret int64
		return ret
	}
	return *o.EquivalentValueId
}

// GetEquivalentValueIdOk returns a tuple with the EquivalentValueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantUnitValue) GetEquivalentValueIdOk() (*int64, bool) {
	if o == nil || IsNil(o.EquivalentValueId) {
		return nil, false
	}
	return o.EquivalentValueId, true
}

// HasEquivalentValueId returns a boolean if a field has been set.
func (o *VariantUnitValue) HasEquivalentValueId() bool {
	if o != nil && !IsNil(o.EquivalentValueId) {
		return true
	}

	return false
}

// SetEquivalentValueId gets a reference to the given int64 and assigns it to the EquivalentValueId field.
func (o *VariantUnitValue) SetEquivalentValueId(v int64) {
	o.EquivalentValueId = &v
}

// GetEnglishValue returns the EnglishValue field value if set, zero value otherwise.
func (o *VariantUnitValue) GetEnglishValue() string {
	if o == nil || IsNil(o.EnglishValue) {
		var ret string
		return ret
	}
	return *o.EnglishValue
}

// GetEnglishValueOk returns a tuple with the EnglishValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantUnitValue) GetEnglishValueOk() (*string, bool) {
	if o == nil || IsNil(o.EnglishValue) {
		return nil, false
	}
	return o.EnglishValue, true
}

// HasEnglishValue returns a boolean if a field has been set.
func (o *VariantUnitValue) HasEnglishValue() bool {
	if o != nil && !IsNil(o.EnglishValue) {
		return true
	}

	return false
}

// SetEnglishValue gets a reference to the given string and assigns it to the EnglishValue field.
func (o *VariantUnitValue) SetEnglishValue(v string) {
	o.EnglishValue = &v
}

// GetHex returns the Hex field value if set, zero value otherwise.
func (o *VariantUnitValue) GetHex() string {
	if o == nil || IsNil(o.Hex) {
		var ret string
		return ret
	}
	return *o.Hex
}

// GetHexOk returns a tuple with the Hex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantUnitValue) GetHexOk() (*string, bool) {
	if o == nil || IsNil(o.Hex) {
		return nil, false
	}
	return o.Hex, true
}

// HasHex returns a boolean if a field has been set.
func (o *VariantUnitValue) HasHex() bool {
	if o != nil && !IsNil(o.Hex) {
		return true
	}

	return false
}

// SetHex gets a reference to the given string and assigns it to the Hex field.
func (o *VariantUnitValue) SetHex(v string) {
	o.Hex = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *VariantUnitValue) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantUnitValue) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *VariantUnitValue) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *VariantUnitValue) SetIcon(v string) {
	o.Icon = &v
}

func (o VariantUnitValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VariantUnitValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VariantUnitValueId) {
		toSerialize["variant_unit_value_id"] = o.VariantUnitValueId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.EquivalentValueId) {
		toSerialize["equivalent_value_id"] = o.EquivalentValueId
	}
	if !IsNil(o.EnglishValue) {
		toSerialize["english_value"] = o.EnglishValue
	}
	if !IsNil(o.Hex) {
		toSerialize["hex"] = o.Hex
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	return toSerialize, nil
}

type NullableVariantUnitValue struct {
	value *VariantUnitValue
	isSet bool
}

func (v NullableVariantUnitValue) Get() *VariantUnitValue {
	return v.value
}

func (v *NullableVariantUnitValue) Set(val *VariantUnitValue) {
	v.value = val
	v.isSet = true
}

func (v NullableVariantUnitValue) IsSet() bool {
	return v.isSet
}

func (v *NullableVariantUnitValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariantUnitValue(val *VariantUnitValue) *NullableVariantUnitValue {
	return &NullableVariantUnitValue{value: val, isSet: true}
}

func (v NullableVariantUnitValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariantUnitValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


