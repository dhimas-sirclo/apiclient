/*
Tokopedia API

Tokopedia API

API version: 1.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokopedia

import (
	"encoding/json"
)

// checks if the EditProductV2RequestProductsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditProductV2RequestProductsInner{}

// EditProductV2RequestProductsInner struct for EditProductV2RequestProductsInner
type EditProductV2RequestProductsInner struct {
	// Product Identifier. Please choose either id or sku.
	Id *int64 `json:"id,omitempty"`
	// The stock keeping unit for the product. Maximum characters allowed is 50. Please choose either id or sku.
	Sku *string `json:"sku,omitempty"`
	// Name of the product with length less than or equals 70 characters
	Name *string `json:"Name,omitempty"`
	// Unique identifier for the productâ€™s category. To get available categories, please check Get All Categories Please input the deepest category child ID
	CategoryId *int64 `json:"category_id,omitempty"`
	// The condition of the product with the following available values NEW and USED
	Condition *string `json:"condition,omitempty"`
	// Description of the product. Maximum characters allowed is 2000
	Description *string `json:"Description,omitempty"`
	// The possible value between 100 to 100.000.000. If the product variant is added, the price parameter is automatically set to the lowest price among the variant products
	Price *float64 `json:"price,omitempty"`
	// Status for the product with the following available values UNLIMITED, LIMITED, and EMPTY
	Status *string `json:"status,omitempty"`
	// The stock of the product. 0 indicates always available. Other than that, the possible values are from 1 to 1000. Stock should be 1 if want to add variant product
	Stock *int64 `json:"stock,omitempty"`
	// Minimum order required to purchase the product. Can only be a positive integer
	MinOrder *int64 `json:"min_order,omitempty"`
	// Currency code for stated price (IDR or USD)
	PriceCurrency *string `json:"price_currency,omitempty"`
	// Weight of the product
	Weight *float64 `json:"weight,omitempty"`
	// The unit of the weight with the following available value GR (gram)
	WeightUnit *string `json:"weight_unit,omitempty"`
	// Determine if the product can be returned (true) by buyers or not (false)
	IsFreeReturn *bool `json:"is_free_return,omitempty"`
	// Determine if the product must be insured (true) or not (false)
	IsMustInsurance *bool `json:"is_must_insurance,omitempty"`
	Etalase *EditProductV2RequestProductsInnerEtalase `json:"etalase,omitempty"`
	// Images information of the product. The object keys includes: file_path. Remove pictures from related product by passing empty array ([]) in this request
	Pictures []EditProductV2RequestProductsInnerPicturesInner `json:"pictures,omitempty"`
	// Wholesale price and quantity of the product. The object keys includes: min_qty and price. Remove wholesale from related product by passing empty array ([]) in this request
	Wholesale []EditProductV2RequestProductsInnerWholesaleInner `json:"wholesale,omitempty"`
	Preorder *EditProductV2RequestProductsInnerPreorder `json:"preorder,omitempty"`
	// Video link of the product. The object keys includes: url and source. url should only contain the YouTube video id e.g. dQw4w9WgXcQ. Where the type type should be youtube. Remove videos from related product by passing empty array ([]) in this request
	Videos []EditProductV2RequestProductsInnerVideosInner `json:"videos,omitempty"`
	Variant *EditProductV2RequestProductsInnerVariant `json:"variant,omitempty"`
}

// NewEditProductV2RequestProductsInner instantiates a new EditProductV2RequestProductsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditProductV2RequestProductsInner() *EditProductV2RequestProductsInner {
	this := EditProductV2RequestProductsInner{}
	var weightUnit string = "GR"
	this.WeightUnit = &weightUnit
	return &this
}

// NewEditProductV2RequestProductsInnerWithDefaults instantiates a new EditProductV2RequestProductsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditProductV2RequestProductsInnerWithDefaults() *EditProductV2RequestProductsInner {
	this := EditProductV2RequestProductsInner{}
	var weightUnit string = "GR"
	this.WeightUnit = &weightUnit
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EditProductV2RequestProductsInner) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditProductV2RequestProductsInner) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EditProductV2RequestProductsInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *EditProductV2RequestProductsInner) SetId(v int64) {
	o.Id = &v
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *EditProductV2RequestProductsInner) GetSku() string {
	if o == nil || IsNil(o.Sku) {
		var ret string
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditProductV2RequestProductsInner) GetSkuOk() (*string, bool) {
	if o == nil || IsNil(o.Sku) {
		return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *EditProductV2RequestProductsInner) HasSku() bool {
	if o != nil && !IsNil(o.Sku) {
		return true
	}

	return false
}

// SetSku gets a reference to the given string and assigns it to the Sku field.
func (o *EditProductV2RequestProductsInner) SetSku(v string) {
	o.Sku = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EditProductV2RequestProductsInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditProductV2RequestProductsInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EditProductV2RequestProductsInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EditProductV2RequestProductsInner) SetName(v string) {
	o.Name = &v
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *EditProductV2RequestProductsInner) GetCategoryId() int64 {
	if o == nil || IsNil(o.CategoryId) {
		var ret int64
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditProductV2RequestProductsInner) GetCategoryIdOk() (*int64, bool) {
	if o == nil || IsNil(o.CategoryId) {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *EditProductV2RequestProductsInner) HasCategoryId() bool {
	if o != nil && !IsNil(o.CategoryId) {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given int64 and assigns it to the CategoryId field.
func (o *EditProductV2RequestProductsInner) SetCategoryId(v int64) {
	o.CategoryId = &v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *EditProductV2RequestProductsInner) GetCondition() string {
	if o == nil || IsNil(o.Condition) {
		var ret string
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditProductV2RequestProductsInner) GetConditionOk() (*string, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *EditProductV2RequestProductsInner) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given string and assigns it to the Condition field.
func (o *EditProductV2RequestProductsInner) SetCondition(v string) {
	o.Condition = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EditProductV2RequestProductsInner) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditProductV2RequestProductsInner) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EditProductV2RequestProductsInner) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EditProductV2RequestProductsInner) SetDescription(v string) {
	o.Description = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *EditProductV2RequestProductsInner) GetPrice() float64 {
	if o == nil || IsNil(o.Price) {
		var ret float64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditProductV2RequestProductsInner) GetPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *EditProductV2RequestProductsInner) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float64 and assigns it to the Price field.
func (o *EditProductV2RequestProductsInner) SetPrice(v float64) {
	o.Price = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *EditProductV2RequestProductsInner) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditProductV2RequestProductsInner) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *EditProductV2RequestProductsInner) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *EditProductV2RequestProductsInner) SetStatus(v string) {
	o.Status = &v
}

// GetStock returns the Stock field value if set, zero value otherwise.
func (o *EditProductV2RequestProductsInner) GetStock() int64 {
	if o == nil || IsNil(o.Stock) {
		var ret int64
		return ret
	}
	return *o.Stock
}

// GetStockOk returns a tuple with the Stock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditProductV2RequestProductsInner) GetStockOk() (*int64, bool) {
	if o == nil || IsNil(o.Stock) {
		return nil, false
	}
	return o.Stock, true
}

// HasStock returns a boolean if a field has been set.
func (o *EditProductV2RequestProductsInner) HasStock() bool {
	if o != nil && !IsNil(o.Stock) {
		return true
	}

	return false
}

// SetStock gets a reference to the given int64 and assigns it to the Stock field.
func (o *EditProductV2RequestProductsInner) SetStock(v int64) {
	o.Stock = &v
}

// GetMinOrder returns the MinOrder field value if set, zero value otherwise.
func (o *EditProductV2RequestProductsInner) GetMinOrder() int64 {
	if o == nil || IsNil(o.MinOrder) {
		var ret int64
		return ret
	}
	return *o.MinOrder
}

// GetMinOrderOk returns a tuple with the MinOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditProductV2RequestProductsInner) GetMinOrderOk() (*int64, bool) {
	if o == nil || IsNil(o.MinOrder) {
		return nil, false
	}
	return o.MinOrder, true
}

// HasMinOrder returns a boolean if a field has been set.
func (o *EditProductV2RequestProductsInner) HasMinOrder() bool {
	if o != nil && !IsNil(o.MinOrder) {
		return true
	}

	return false
}

// SetMinOrder gets a reference to the given int64 and assigns it to the MinOrder field.
func (o *EditProductV2RequestProductsInner) SetMinOrder(v int64) {
	o.MinOrder = &v
}

// GetPriceCurrency returns the PriceCurrency field value if set, zero value otherwise.
func (o *EditProductV2RequestProductsInner) GetPriceCurrency() string {
	if o == nil || IsNil(o.PriceCurrency) {
		var ret string
		return ret
	}
	return *o.PriceCurrency
}

// GetPriceCurrencyOk returns a tuple with the PriceCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditProductV2RequestProductsInner) GetPriceCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.PriceCurrency) {
		return nil, false
	}
	return o.PriceCurrency, true
}

// HasPriceCurrency returns a boolean if a field has been set.
func (o *EditProductV2RequestProductsInner) HasPriceCurrency() bool {
	if o != nil && !IsNil(o.PriceCurrency) {
		return true
	}

	return false
}

// SetPriceCurrency gets a reference to the given string and assigns it to the PriceCurrency field.
func (o *EditProductV2RequestProductsInner) SetPriceCurrency(v string) {
	o.PriceCurrency = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *EditProductV2RequestProductsInner) GetWeight() float64 {
	if o == nil || IsNil(o.Weight) {
		var ret float64
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditProductV2RequestProductsInner) GetWeightOk() (*float64, bool) {
	if o == nil || IsNil(o.Weight) {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *EditProductV2RequestProductsInner) HasWeight() bool {
	if o != nil && !IsNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given float64 and assigns it to the Weight field.
func (o *EditProductV2RequestProductsInner) SetWeight(v float64) {
	o.Weight = &v
}

// GetWeightUnit returns the WeightUnit field value if set, zero value otherwise.
func (o *EditProductV2RequestProductsInner) GetWeightUnit() string {
	if o == nil || IsNil(o.WeightUnit) {
		var ret string
		return ret
	}
	return *o.WeightUnit
}

// GetWeightUnitOk returns a tuple with the WeightUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditProductV2RequestProductsInner) GetWeightUnitOk() (*string, bool) {
	if o == nil || IsNil(o.WeightUnit) {
		return nil, false
	}
	return o.WeightUnit, true
}

// HasWeightUnit returns a boolean if a field has been set.
func (o *EditProductV2RequestProductsInner) HasWeightUnit() bool {
	if o != nil && !IsNil(o.WeightUnit) {
		return true
	}

	return false
}

// SetWeightUnit gets a reference to the given string and assigns it to the WeightUnit field.
func (o *EditProductV2RequestProductsInner) SetWeightUnit(v string) {
	o.WeightUnit = &v
}

// GetIsFreeReturn returns the IsFreeReturn field value if set, zero value otherwise.
func (o *EditProductV2RequestProductsInner) GetIsFreeReturn() bool {
	if o == nil || IsNil(o.IsFreeReturn) {
		var ret bool
		return ret
	}
	return *o.IsFreeReturn
}

// GetIsFreeReturnOk returns a tuple with the IsFreeReturn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditProductV2RequestProductsInner) GetIsFreeReturnOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFreeReturn) {
		return nil, false
	}
	return o.IsFreeReturn, true
}

// HasIsFreeReturn returns a boolean if a field has been set.
func (o *EditProductV2RequestProductsInner) HasIsFreeReturn() bool {
	if o != nil && !IsNil(o.IsFreeReturn) {
		return true
	}

	return false
}

// SetIsFreeReturn gets a reference to the given bool and assigns it to the IsFreeReturn field.
func (o *EditProductV2RequestProductsInner) SetIsFreeReturn(v bool) {
	o.IsFreeReturn = &v
}

// GetIsMustInsurance returns the IsMustInsurance field value if set, zero value otherwise.
func (o *EditProductV2RequestProductsInner) GetIsMustInsurance() bool {
	if o == nil || IsNil(o.IsMustInsurance) {
		var ret bool
		return ret
	}
	return *o.IsMustInsurance
}

// GetIsMustInsuranceOk returns a tuple with the IsMustInsurance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditProductV2RequestProductsInner) GetIsMustInsuranceOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMustInsurance) {
		return nil, false
	}
	return o.IsMustInsurance, true
}

// HasIsMustInsurance returns a boolean if a field has been set.
func (o *EditProductV2RequestProductsInner) HasIsMustInsurance() bool {
	if o != nil && !IsNil(o.IsMustInsurance) {
		return true
	}

	return false
}

// SetIsMustInsurance gets a reference to the given bool and assigns it to the IsMustInsurance field.
func (o *EditProductV2RequestProductsInner) SetIsMustInsurance(v bool) {
	o.IsMustInsurance = &v
}

// GetEtalase returns the Etalase field value if set, zero value otherwise.
func (o *EditProductV2RequestProductsInner) GetEtalase() EditProductV2RequestProductsInnerEtalase {
	if o == nil || IsNil(o.Etalase) {
		var ret EditProductV2RequestProductsInnerEtalase
		return ret
	}
	return *o.Etalase
}

// GetEtalaseOk returns a tuple with the Etalase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditProductV2RequestProductsInner) GetEtalaseOk() (*EditProductV2RequestProductsInnerEtalase, bool) {
	if o == nil || IsNil(o.Etalase) {
		return nil, false
	}
	return o.Etalase, true
}

// HasEtalase returns a boolean if a field has been set.
func (o *EditProductV2RequestProductsInner) HasEtalase() bool {
	if o != nil && !IsNil(o.Etalase) {
		return true
	}

	return false
}

// SetEtalase gets a reference to the given EditProductV2RequestProductsInnerEtalase and assigns it to the Etalase field.
func (o *EditProductV2RequestProductsInner) SetEtalase(v EditProductV2RequestProductsInnerEtalase) {
	o.Etalase = &v
}

// GetPictures returns the Pictures field value if set, zero value otherwise.
func (o *EditProductV2RequestProductsInner) GetPictures() []EditProductV2RequestProductsInnerPicturesInner {
	if o == nil || IsNil(o.Pictures) {
		var ret []EditProductV2RequestProductsInnerPicturesInner
		return ret
	}
	return o.Pictures
}

// GetPicturesOk returns a tuple with the Pictures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditProductV2RequestProductsInner) GetPicturesOk() ([]EditProductV2RequestProductsInnerPicturesInner, bool) {
	if o == nil || IsNil(o.Pictures) {
		return nil, false
	}
	return o.Pictures, true
}

// HasPictures returns a boolean if a field has been set.
func (o *EditProductV2RequestProductsInner) HasPictures() bool {
	if o != nil && !IsNil(o.Pictures) {
		return true
	}

	return false
}

// SetPictures gets a reference to the given []EditProductV2RequestProductsInnerPicturesInner and assigns it to the Pictures field.
func (o *EditProductV2RequestProductsInner) SetPictures(v []EditProductV2RequestProductsInnerPicturesInner) {
	o.Pictures = v
}

// GetWholesale returns the Wholesale field value if set, zero value otherwise.
func (o *EditProductV2RequestProductsInner) GetWholesale() []EditProductV2RequestProductsInnerWholesaleInner {
	if o == nil || IsNil(o.Wholesale) {
		var ret []EditProductV2RequestProductsInnerWholesaleInner
		return ret
	}
	return o.Wholesale
}

// GetWholesaleOk returns a tuple with the Wholesale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditProductV2RequestProductsInner) GetWholesaleOk() ([]EditProductV2RequestProductsInnerWholesaleInner, bool) {
	if o == nil || IsNil(o.Wholesale) {
		return nil, false
	}
	return o.Wholesale, true
}

// HasWholesale returns a boolean if a field has been set.
func (o *EditProductV2RequestProductsInner) HasWholesale() bool {
	if o != nil && !IsNil(o.Wholesale) {
		return true
	}

	return false
}

// SetWholesale gets a reference to the given []EditProductV2RequestProductsInnerWholesaleInner and assigns it to the Wholesale field.
func (o *EditProductV2RequestProductsInner) SetWholesale(v []EditProductV2RequestProductsInnerWholesaleInner) {
	o.Wholesale = v
}

// GetPreorder returns the Preorder field value if set, zero value otherwise.
func (o *EditProductV2RequestProductsInner) GetPreorder() EditProductV2RequestProductsInnerPreorder {
	if o == nil || IsNil(o.Preorder) {
		var ret EditProductV2RequestProductsInnerPreorder
		return ret
	}
	return *o.Preorder
}

// GetPreorderOk returns a tuple with the Preorder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditProductV2RequestProductsInner) GetPreorderOk() (*EditProductV2RequestProductsInnerPreorder, bool) {
	if o == nil || IsNil(o.Preorder) {
		return nil, false
	}
	return o.Preorder, true
}

// HasPreorder returns a boolean if a field has been set.
func (o *EditProductV2RequestProductsInner) HasPreorder() bool {
	if o != nil && !IsNil(o.Preorder) {
		return true
	}

	return false
}

// SetPreorder gets a reference to the given EditProductV2RequestProductsInnerPreorder and assigns it to the Preorder field.
func (o *EditProductV2RequestProductsInner) SetPreorder(v EditProductV2RequestProductsInnerPreorder) {
	o.Preorder = &v
}

// GetVideos returns the Videos field value if set, zero value otherwise.
func (o *EditProductV2RequestProductsInner) GetVideos() []EditProductV2RequestProductsInnerVideosInner {
	if o == nil || IsNil(o.Videos) {
		var ret []EditProductV2RequestProductsInnerVideosInner
		return ret
	}
	return o.Videos
}

// GetVideosOk returns a tuple with the Videos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditProductV2RequestProductsInner) GetVideosOk() ([]EditProductV2RequestProductsInnerVideosInner, bool) {
	if o == nil || IsNil(o.Videos) {
		return nil, false
	}
	return o.Videos, true
}

// HasVideos returns a boolean if a field has been set.
func (o *EditProductV2RequestProductsInner) HasVideos() bool {
	if o != nil && !IsNil(o.Videos) {
		return true
	}

	return false
}

// SetVideos gets a reference to the given []EditProductV2RequestProductsInnerVideosInner and assigns it to the Videos field.
func (o *EditProductV2RequestProductsInner) SetVideos(v []EditProductV2RequestProductsInnerVideosInner) {
	o.Videos = v
}

// GetVariant returns the Variant field value if set, zero value otherwise.
func (o *EditProductV2RequestProductsInner) GetVariant() EditProductV2RequestProductsInnerVariant {
	if o == nil || IsNil(o.Variant) {
		var ret EditProductV2RequestProductsInnerVariant
		return ret
	}
	return *o.Variant
}

// GetVariantOk returns a tuple with the Variant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditProductV2RequestProductsInner) GetVariantOk() (*EditProductV2RequestProductsInnerVariant, bool) {
	if o == nil || IsNil(o.Variant) {
		return nil, false
	}
	return o.Variant, true
}

// HasVariant returns a boolean if a field has been set.
func (o *EditProductV2RequestProductsInner) HasVariant() bool {
	if o != nil && !IsNil(o.Variant) {
		return true
	}

	return false
}

// SetVariant gets a reference to the given EditProductV2RequestProductsInnerVariant and assigns it to the Variant field.
func (o *EditProductV2RequestProductsInner) SetVariant(v EditProductV2RequestProductsInnerVariant) {
	o.Variant = &v
}

func (o EditProductV2RequestProductsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditProductV2RequestProductsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Sku) {
		toSerialize["sku"] = o.Sku
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.CategoryId) {
		toSerialize["category_id"] = o.CategoryId
	}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Stock) {
		toSerialize["stock"] = o.Stock
	}
	if !IsNil(o.MinOrder) {
		toSerialize["min_order"] = o.MinOrder
	}
	if !IsNil(o.PriceCurrency) {
		toSerialize["price_currency"] = o.PriceCurrency
	}
	if !IsNil(o.Weight) {
		toSerialize["weight"] = o.Weight
	}
	if !IsNil(o.WeightUnit) {
		toSerialize["weight_unit"] = o.WeightUnit
	}
	if !IsNil(o.IsFreeReturn) {
		toSerialize["is_free_return"] = o.IsFreeReturn
	}
	if !IsNil(o.IsMustInsurance) {
		toSerialize["is_must_insurance"] = o.IsMustInsurance
	}
	if !IsNil(o.Etalase) {
		toSerialize["etalase"] = o.Etalase
	}
	if !IsNil(o.Pictures) {
		toSerialize["pictures"] = o.Pictures
	}
	if !IsNil(o.Wholesale) {
		toSerialize["wholesale"] = o.Wholesale
	}
	if !IsNil(o.Preorder) {
		toSerialize["preorder"] = o.Preorder
	}
	if !IsNil(o.Videos) {
		toSerialize["videos"] = o.Videos
	}
	if !IsNil(o.Variant) {
		toSerialize["variant"] = o.Variant
	}
	return toSerialize, nil
}

type NullableEditProductV2RequestProductsInner struct {
	value *EditProductV2RequestProductsInner
	isSet bool
}

func (v NullableEditProductV2RequestProductsInner) Get() *EditProductV2RequestProductsInner {
	return v.value
}

func (v *NullableEditProductV2RequestProductsInner) Set(val *EditProductV2RequestProductsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableEditProductV2RequestProductsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableEditProductV2RequestProductsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditProductV2RequestProductsInner(val *EditProductV2RequestProductsInner) *NullableEditProductV2RequestProductsInner {
	return &NullableEditProductV2RequestProductsInner{value: val, isSet: true}
}

func (v NullableEditProductV2RequestProductsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditProductV2RequestProductsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


