/*
Tokopedia API

Tokopedia API

API version: 1.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokopedia

import (
	"encoding/json"
)

// checks if the IncreaseStockResponseDataSucceedRowsDataInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IncreaseStockResponseDataSucceedRowsDataInner{}

// IncreaseStockResponseDataSucceedRowsDataInner struct for IncreaseStockResponseDataSucceedRowsDataInner
type IncreaseStockResponseDataSucceedRowsDataInner struct {
	ProductID *int64 `json:"productID,omitempty"`
	WarehouseID *int64 `json:"warehouseID,omitempty"`
	ShopID *int64 `json:"shopID,omitempty"`
	Stock *int64 `json:"stock,omitempty"`
	Price *float64 `json:"price,omitempty"`
}

// NewIncreaseStockResponseDataSucceedRowsDataInner instantiates a new IncreaseStockResponseDataSucceedRowsDataInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncreaseStockResponseDataSucceedRowsDataInner() *IncreaseStockResponseDataSucceedRowsDataInner {
	this := IncreaseStockResponseDataSucceedRowsDataInner{}
	return &this
}

// NewIncreaseStockResponseDataSucceedRowsDataInnerWithDefaults instantiates a new IncreaseStockResponseDataSucceedRowsDataInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncreaseStockResponseDataSucceedRowsDataInnerWithDefaults() *IncreaseStockResponseDataSucceedRowsDataInner {
	this := IncreaseStockResponseDataSucceedRowsDataInner{}
	return &this
}

// GetProductID returns the ProductID field value if set, zero value otherwise.
func (o *IncreaseStockResponseDataSucceedRowsDataInner) GetProductID() int64 {
	if o == nil || IsNil(o.ProductID) {
		var ret int64
		return ret
	}
	return *o.ProductID
}

// GetProductIDOk returns a tuple with the ProductID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncreaseStockResponseDataSucceedRowsDataInner) GetProductIDOk() (*int64, bool) {
	if o == nil || IsNil(o.ProductID) {
		return nil, false
	}
	return o.ProductID, true
}

// HasProductID returns a boolean if a field has been set.
func (o *IncreaseStockResponseDataSucceedRowsDataInner) HasProductID() bool {
	if o != nil && !IsNil(o.ProductID) {
		return true
	}

	return false
}

// SetProductID gets a reference to the given int64 and assigns it to the ProductID field.
func (o *IncreaseStockResponseDataSucceedRowsDataInner) SetProductID(v int64) {
	o.ProductID = &v
}

// GetWarehouseID returns the WarehouseID field value if set, zero value otherwise.
func (o *IncreaseStockResponseDataSucceedRowsDataInner) GetWarehouseID() int64 {
	if o == nil || IsNil(o.WarehouseID) {
		var ret int64
		return ret
	}
	return *o.WarehouseID
}

// GetWarehouseIDOk returns a tuple with the WarehouseID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncreaseStockResponseDataSucceedRowsDataInner) GetWarehouseIDOk() (*int64, bool) {
	if o == nil || IsNil(o.WarehouseID) {
		return nil, false
	}
	return o.WarehouseID, true
}

// HasWarehouseID returns a boolean if a field has been set.
func (o *IncreaseStockResponseDataSucceedRowsDataInner) HasWarehouseID() bool {
	if o != nil && !IsNil(o.WarehouseID) {
		return true
	}

	return false
}

// SetWarehouseID gets a reference to the given int64 and assigns it to the WarehouseID field.
func (o *IncreaseStockResponseDataSucceedRowsDataInner) SetWarehouseID(v int64) {
	o.WarehouseID = &v
}

// GetShopID returns the ShopID field value if set, zero value otherwise.
func (o *IncreaseStockResponseDataSucceedRowsDataInner) GetShopID() int64 {
	if o == nil || IsNil(o.ShopID) {
		var ret int64
		return ret
	}
	return *o.ShopID
}

// GetShopIDOk returns a tuple with the ShopID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncreaseStockResponseDataSucceedRowsDataInner) GetShopIDOk() (*int64, bool) {
	if o == nil || IsNil(o.ShopID) {
		return nil, false
	}
	return o.ShopID, true
}

// HasShopID returns a boolean if a field has been set.
func (o *IncreaseStockResponseDataSucceedRowsDataInner) HasShopID() bool {
	if o != nil && !IsNil(o.ShopID) {
		return true
	}

	return false
}

// SetShopID gets a reference to the given int64 and assigns it to the ShopID field.
func (o *IncreaseStockResponseDataSucceedRowsDataInner) SetShopID(v int64) {
	o.ShopID = &v
}

// GetStock returns the Stock field value if set, zero value otherwise.
func (o *IncreaseStockResponseDataSucceedRowsDataInner) GetStock() int64 {
	if o == nil || IsNil(o.Stock) {
		var ret int64
		return ret
	}
	return *o.Stock
}

// GetStockOk returns a tuple with the Stock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncreaseStockResponseDataSucceedRowsDataInner) GetStockOk() (*int64, bool) {
	if o == nil || IsNil(o.Stock) {
		return nil, false
	}
	return o.Stock, true
}

// HasStock returns a boolean if a field has been set.
func (o *IncreaseStockResponseDataSucceedRowsDataInner) HasStock() bool {
	if o != nil && !IsNil(o.Stock) {
		return true
	}

	return false
}

// SetStock gets a reference to the given int64 and assigns it to the Stock field.
func (o *IncreaseStockResponseDataSucceedRowsDataInner) SetStock(v int64) {
	o.Stock = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *IncreaseStockResponseDataSucceedRowsDataInner) GetPrice() float64 {
	if o == nil || IsNil(o.Price) {
		var ret float64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncreaseStockResponseDataSucceedRowsDataInner) GetPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *IncreaseStockResponseDataSucceedRowsDataInner) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float64 and assigns it to the Price field.
func (o *IncreaseStockResponseDataSucceedRowsDataInner) SetPrice(v float64) {
	o.Price = &v
}

func (o IncreaseStockResponseDataSucceedRowsDataInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IncreaseStockResponseDataSucceedRowsDataInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProductID) {
		toSerialize["productID"] = o.ProductID
	}
	if !IsNil(o.WarehouseID) {
		toSerialize["warehouseID"] = o.WarehouseID
	}
	if !IsNil(o.ShopID) {
		toSerialize["shopID"] = o.ShopID
	}
	if !IsNil(o.Stock) {
		toSerialize["stock"] = o.Stock
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	return toSerialize, nil
}

type NullableIncreaseStockResponseDataSucceedRowsDataInner struct {
	value *IncreaseStockResponseDataSucceedRowsDataInner
	isSet bool
}

func (v NullableIncreaseStockResponseDataSucceedRowsDataInner) Get() *IncreaseStockResponseDataSucceedRowsDataInner {
	return v.value
}

func (v *NullableIncreaseStockResponseDataSucceedRowsDataInner) Set(val *IncreaseStockResponseDataSucceedRowsDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableIncreaseStockResponseDataSucceedRowsDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableIncreaseStockResponseDataSucceedRowsDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncreaseStockResponseDataSucceedRowsDataInner(val *IncreaseStockResponseDataSucceedRowsDataInner) *NullableIncreaseStockResponseDataSucceedRowsDataInner {
	return &NullableIncreaseStockResponseDataSucceedRowsDataInner{value: val, isSet: true}
}

func (v NullableIncreaseStockResponseDataSucceedRowsDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncreaseStockResponseDataSucceedRowsDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


