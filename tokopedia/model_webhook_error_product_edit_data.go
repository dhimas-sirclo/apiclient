/*
Tokopedia API

Tokopedia API

API version: 1.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokopedia

import (
	"encoding/json"
)

// checks if the WebhookErrorProductEditData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookErrorProductEditData{}

// WebhookErrorProductEditData struct for WebhookErrorProductEditData
type WebhookErrorProductEditData struct {
	Status *string `json:"status,omitempty"`
	TotalData *int64 `json:"total_data,omitempty"`
	UnprocessedRows *int64 `json:"unprocessed_rows,omitempty"`
	SuccessRows *int64 `json:"success_rows,omitempty"`
	FailedRows *int64 `json:"failed_rows,omitempty"`
	FailedRowsData []EditProductV3DefaultResponseDataFailedRowsDataInner `json:"failed_rows_data,omitempty"`
	ProcessedRows *int64 `json:"processed_rows,omitempty"`
}

// NewWebhookErrorProductEditData instantiates a new WebhookErrorProductEditData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookErrorProductEditData() *WebhookErrorProductEditData {
	this := WebhookErrorProductEditData{}
	return &this
}

// NewWebhookErrorProductEditDataWithDefaults instantiates a new WebhookErrorProductEditData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookErrorProductEditDataWithDefaults() *WebhookErrorProductEditData {
	this := WebhookErrorProductEditData{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *WebhookErrorProductEditData) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookErrorProductEditData) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *WebhookErrorProductEditData) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *WebhookErrorProductEditData) SetStatus(v string) {
	o.Status = &v
}

// GetTotalData returns the TotalData field value if set, zero value otherwise.
func (o *WebhookErrorProductEditData) GetTotalData() int64 {
	if o == nil || IsNil(o.TotalData) {
		var ret int64
		return ret
	}
	return *o.TotalData
}

// GetTotalDataOk returns a tuple with the TotalData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookErrorProductEditData) GetTotalDataOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalData) {
		return nil, false
	}
	return o.TotalData, true
}

// HasTotalData returns a boolean if a field has been set.
func (o *WebhookErrorProductEditData) HasTotalData() bool {
	if o != nil && !IsNil(o.TotalData) {
		return true
	}

	return false
}

// SetTotalData gets a reference to the given int64 and assigns it to the TotalData field.
func (o *WebhookErrorProductEditData) SetTotalData(v int64) {
	o.TotalData = &v
}

// GetUnprocessedRows returns the UnprocessedRows field value if set, zero value otherwise.
func (o *WebhookErrorProductEditData) GetUnprocessedRows() int64 {
	if o == nil || IsNil(o.UnprocessedRows) {
		var ret int64
		return ret
	}
	return *o.UnprocessedRows
}

// GetUnprocessedRowsOk returns a tuple with the UnprocessedRows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookErrorProductEditData) GetUnprocessedRowsOk() (*int64, bool) {
	if o == nil || IsNil(o.UnprocessedRows) {
		return nil, false
	}
	return o.UnprocessedRows, true
}

// HasUnprocessedRows returns a boolean if a field has been set.
func (o *WebhookErrorProductEditData) HasUnprocessedRows() bool {
	if o != nil && !IsNil(o.UnprocessedRows) {
		return true
	}

	return false
}

// SetUnprocessedRows gets a reference to the given int64 and assigns it to the UnprocessedRows field.
func (o *WebhookErrorProductEditData) SetUnprocessedRows(v int64) {
	o.UnprocessedRows = &v
}

// GetSuccessRows returns the SuccessRows field value if set, zero value otherwise.
func (o *WebhookErrorProductEditData) GetSuccessRows() int64 {
	if o == nil || IsNil(o.SuccessRows) {
		var ret int64
		return ret
	}
	return *o.SuccessRows
}

// GetSuccessRowsOk returns a tuple with the SuccessRows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookErrorProductEditData) GetSuccessRowsOk() (*int64, bool) {
	if o == nil || IsNil(o.SuccessRows) {
		return nil, false
	}
	return o.SuccessRows, true
}

// HasSuccessRows returns a boolean if a field has been set.
func (o *WebhookErrorProductEditData) HasSuccessRows() bool {
	if o != nil && !IsNil(o.SuccessRows) {
		return true
	}

	return false
}

// SetSuccessRows gets a reference to the given int64 and assigns it to the SuccessRows field.
func (o *WebhookErrorProductEditData) SetSuccessRows(v int64) {
	o.SuccessRows = &v
}

// GetFailedRows returns the FailedRows field value if set, zero value otherwise.
func (o *WebhookErrorProductEditData) GetFailedRows() int64 {
	if o == nil || IsNil(o.FailedRows) {
		var ret int64
		return ret
	}
	return *o.FailedRows
}

// GetFailedRowsOk returns a tuple with the FailedRows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookErrorProductEditData) GetFailedRowsOk() (*int64, bool) {
	if o == nil || IsNil(o.FailedRows) {
		return nil, false
	}
	return o.FailedRows, true
}

// HasFailedRows returns a boolean if a field has been set.
func (o *WebhookErrorProductEditData) HasFailedRows() bool {
	if o != nil && !IsNil(o.FailedRows) {
		return true
	}

	return false
}

// SetFailedRows gets a reference to the given int64 and assigns it to the FailedRows field.
func (o *WebhookErrorProductEditData) SetFailedRows(v int64) {
	o.FailedRows = &v
}

// GetFailedRowsData returns the FailedRowsData field value if set, zero value otherwise.
func (o *WebhookErrorProductEditData) GetFailedRowsData() []EditProductV3DefaultResponseDataFailedRowsDataInner {
	if o == nil || IsNil(o.FailedRowsData) {
		var ret []EditProductV3DefaultResponseDataFailedRowsDataInner
		return ret
	}
	return o.FailedRowsData
}

// GetFailedRowsDataOk returns a tuple with the FailedRowsData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookErrorProductEditData) GetFailedRowsDataOk() ([]EditProductV3DefaultResponseDataFailedRowsDataInner, bool) {
	if o == nil || IsNil(o.FailedRowsData) {
		return nil, false
	}
	return o.FailedRowsData, true
}

// HasFailedRowsData returns a boolean if a field has been set.
func (o *WebhookErrorProductEditData) HasFailedRowsData() bool {
	if o != nil && !IsNil(o.FailedRowsData) {
		return true
	}

	return false
}

// SetFailedRowsData gets a reference to the given []EditProductV3DefaultResponseDataFailedRowsDataInner and assigns it to the FailedRowsData field.
func (o *WebhookErrorProductEditData) SetFailedRowsData(v []EditProductV3DefaultResponseDataFailedRowsDataInner) {
	o.FailedRowsData = v
}

// GetProcessedRows returns the ProcessedRows field value if set, zero value otherwise.
func (o *WebhookErrorProductEditData) GetProcessedRows() int64 {
	if o == nil || IsNil(o.ProcessedRows) {
		var ret int64
		return ret
	}
	return *o.ProcessedRows
}

// GetProcessedRowsOk returns a tuple with the ProcessedRows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookErrorProductEditData) GetProcessedRowsOk() (*int64, bool) {
	if o == nil || IsNil(o.ProcessedRows) {
		return nil, false
	}
	return o.ProcessedRows, true
}

// HasProcessedRows returns a boolean if a field has been set.
func (o *WebhookErrorProductEditData) HasProcessedRows() bool {
	if o != nil && !IsNil(o.ProcessedRows) {
		return true
	}

	return false
}

// SetProcessedRows gets a reference to the given int64 and assigns it to the ProcessedRows field.
func (o *WebhookErrorProductEditData) SetProcessedRows(v int64) {
	o.ProcessedRows = &v
}

func (o WebhookErrorProductEditData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookErrorProductEditData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.TotalData) {
		toSerialize["total_data"] = o.TotalData
	}
	if !IsNil(o.UnprocessedRows) {
		toSerialize["unprocessed_rows"] = o.UnprocessedRows
	}
	if !IsNil(o.SuccessRows) {
		toSerialize["success_rows"] = o.SuccessRows
	}
	if !IsNil(o.FailedRows) {
		toSerialize["failed_rows"] = o.FailedRows
	}
	if !IsNil(o.FailedRowsData) {
		toSerialize["failed_rows_data"] = o.FailedRowsData
	}
	if !IsNil(o.ProcessedRows) {
		toSerialize["processed_rows"] = o.ProcessedRows
	}
	return toSerialize, nil
}

type NullableWebhookErrorProductEditData struct {
	value *WebhookErrorProductEditData
	isSet bool
}

func (v NullableWebhookErrorProductEditData) Get() *WebhookErrorProductEditData {
	return v.value
}

func (v *NullableWebhookErrorProductEditData) Set(val *WebhookErrorProductEditData) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookErrorProductEditData) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookErrorProductEditData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookErrorProductEditData(val *WebhookErrorProductEditData) *NullableWebhookErrorProductEditData {
	return &NullableWebhookErrorProductEditData{value: val, isSet: true}
}

func (v NullableWebhookErrorProductEditData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookErrorProductEditData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


