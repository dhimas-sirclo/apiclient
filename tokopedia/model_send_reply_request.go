/*
Tokopedia API

Tokopedia API

API version: 1.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokopedia

import (
	"encoding/json"
	"fmt"
)

// SendReplyRequest - struct for SendReplyRequest
type SendReplyRequest struct {
	SendReplyRequestOneOf *SendReplyRequestOneOf
	SendReplyRequestOneOf1 *SendReplyRequestOneOf1
}

// SendReplyRequestOneOfAsSendReplyRequest is a convenience function that returns SendReplyRequestOneOf wrapped in SendReplyRequest
func SendReplyRequestOneOfAsSendReplyRequest(v *SendReplyRequestOneOf) SendReplyRequest {
	return SendReplyRequest{
		SendReplyRequestOneOf: v,
	}
}

// SendReplyRequestOneOf1AsSendReplyRequest is a convenience function that returns SendReplyRequestOneOf1 wrapped in SendReplyRequest
func SendReplyRequestOneOf1AsSendReplyRequest(v *SendReplyRequestOneOf1) SendReplyRequest {
	return SendReplyRequest{
		SendReplyRequestOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SendReplyRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SendReplyRequestOneOf
	err = newStrictDecoder(data).Decode(&dst.SendReplyRequestOneOf)
	if err == nil {
		jsonSendReplyRequestOneOf, _ := json.Marshal(dst.SendReplyRequestOneOf)
		if string(jsonSendReplyRequestOneOf) == "{}" { // empty struct
			dst.SendReplyRequestOneOf = nil
		} else {
			match++
		}
	} else {
		dst.SendReplyRequestOneOf = nil
	}

	// try to unmarshal data into SendReplyRequestOneOf1
	err = newStrictDecoder(data).Decode(&dst.SendReplyRequestOneOf1)
	if err == nil {
		jsonSendReplyRequestOneOf1, _ := json.Marshal(dst.SendReplyRequestOneOf1)
		if string(jsonSendReplyRequestOneOf1) == "{}" { // empty struct
			dst.SendReplyRequestOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.SendReplyRequestOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SendReplyRequestOneOf = nil
		dst.SendReplyRequestOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SendReplyRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SendReplyRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SendReplyRequest) MarshalJSON() ([]byte, error) {
	if src.SendReplyRequestOneOf != nil {
		return json.Marshal(&src.SendReplyRequestOneOf)
	}

	if src.SendReplyRequestOneOf1 != nil {
		return json.Marshal(&src.SendReplyRequestOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SendReplyRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SendReplyRequestOneOf != nil {
		return obj.SendReplyRequestOneOf
	}

	if obj.SendReplyRequestOneOf1 != nil {
		return obj.SendReplyRequestOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableSendReplyRequest struct {
	value *SendReplyRequest
	isSet bool
}

func (v NullableSendReplyRequest) Get() *SendReplyRequest {
	return v.value
}

func (v *NullableSendReplyRequest) Set(val *SendReplyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSendReplyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSendReplyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendReplyRequest(val *SendReplyRequest) *NullableSendReplyRequest {
	return &NullableSendReplyRequest{value: val, isSet: true}
}

func (v NullableSendReplyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendReplyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


