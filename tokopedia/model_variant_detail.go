/*
Tokopedia

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokopedia

import (
	"encoding/json"
)

// checks if the VariantDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VariantDetail{}

// VariantDetail struct for VariantDetail
type VariantDetail struct {
	VariantId *int64 `json:"variant_id,omitempty"`
	HasUnit *int64 `json:"has_unit,omitempty"`
	Identifier *string `json:"identifier,omitempty"`
	Name *string `json:"name,omitempty"`
	Status *int64 `json:"status,omitempty"`
	Units []VariantUnit `json:"units,omitempty"`
	IsPrimary *int64 `json:"is_primary,omitempty"`
}

// NewVariantDetail instantiates a new VariantDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariantDetail() *VariantDetail {
	this := VariantDetail{}
	return &this
}

// NewVariantDetailWithDefaults instantiates a new VariantDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariantDetailWithDefaults() *VariantDetail {
	this := VariantDetail{}
	return &this
}

// GetVariantId returns the VariantId field value if set, zero value otherwise.
func (o *VariantDetail) GetVariantId() int64 {
	if o == nil || IsNil(o.VariantId) {
		var ret int64
		return ret
	}
	return *o.VariantId
}

// GetVariantIdOk returns a tuple with the VariantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantDetail) GetVariantIdOk() (*int64, bool) {
	if o == nil || IsNil(o.VariantId) {
		return nil, false
	}
	return o.VariantId, true
}

// HasVariantId returns a boolean if a field has been set.
func (o *VariantDetail) HasVariantId() bool {
	if o != nil && !IsNil(o.VariantId) {
		return true
	}

	return false
}

// SetVariantId gets a reference to the given int64 and assigns it to the VariantId field.
func (o *VariantDetail) SetVariantId(v int64) {
	o.VariantId = &v
}

// GetHasUnit returns the HasUnit field value if set, zero value otherwise.
func (o *VariantDetail) GetHasUnit() int64 {
	if o == nil || IsNil(o.HasUnit) {
		var ret int64
		return ret
	}
	return *o.HasUnit
}

// GetHasUnitOk returns a tuple with the HasUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantDetail) GetHasUnitOk() (*int64, bool) {
	if o == nil || IsNil(o.HasUnit) {
		return nil, false
	}
	return o.HasUnit, true
}

// HasHasUnit returns a boolean if a field has been set.
func (o *VariantDetail) HasHasUnit() bool {
	if o != nil && !IsNil(o.HasUnit) {
		return true
	}

	return false
}

// SetHasUnit gets a reference to the given int64 and assigns it to the HasUnit field.
func (o *VariantDetail) SetHasUnit(v int64) {
	o.HasUnit = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *VariantDetail) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantDetail) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *VariantDetail) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *VariantDetail) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VariantDetail) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantDetail) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VariantDetail) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VariantDetail) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *VariantDetail) GetStatus() int64 {
	if o == nil || IsNil(o.Status) {
		var ret int64
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantDetail) GetStatusOk() (*int64, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *VariantDetail) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int64 and assigns it to the Status field.
func (o *VariantDetail) SetStatus(v int64) {
	o.Status = &v
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *VariantDetail) GetUnits() []VariantUnit {
	if o == nil || IsNil(o.Units) {
		var ret []VariantUnit
		return ret
	}
	return o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantDetail) GetUnitsOk() ([]VariantUnit, bool) {
	if o == nil || IsNil(o.Units) {
		return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *VariantDetail) HasUnits() bool {
	if o != nil && !IsNil(o.Units) {
		return true
	}

	return false
}

// SetUnits gets a reference to the given []VariantUnit and assigns it to the Units field.
func (o *VariantDetail) SetUnits(v []VariantUnit) {
	o.Units = v
}

// GetIsPrimary returns the IsPrimary field value if set, zero value otherwise.
func (o *VariantDetail) GetIsPrimary() int64 {
	if o == nil || IsNil(o.IsPrimary) {
		var ret int64
		return ret
	}
	return *o.IsPrimary
}

// GetIsPrimaryOk returns a tuple with the IsPrimary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantDetail) GetIsPrimaryOk() (*int64, bool) {
	if o == nil || IsNil(o.IsPrimary) {
		return nil, false
	}
	return o.IsPrimary, true
}

// HasIsPrimary returns a boolean if a field has been set.
func (o *VariantDetail) HasIsPrimary() bool {
	if o != nil && !IsNil(o.IsPrimary) {
		return true
	}

	return false
}

// SetIsPrimary gets a reference to the given int64 and assigns it to the IsPrimary field.
func (o *VariantDetail) SetIsPrimary(v int64) {
	o.IsPrimary = &v
}

func (o VariantDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VariantDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VariantId) {
		toSerialize["variant_id"] = o.VariantId
	}
	if !IsNil(o.HasUnit) {
		toSerialize["has_unit"] = o.HasUnit
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Units) {
		toSerialize["units"] = o.Units
	}
	if !IsNil(o.IsPrimary) {
		toSerialize["is_primary"] = o.IsPrimary
	}
	return toSerialize, nil
}

type NullableVariantDetail struct {
	value *VariantDetail
	isSet bool
}

func (v NullableVariantDetail) Get() *VariantDetail {
	return v.value
}

func (v *NullableVariantDetail) Set(val *VariantDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableVariantDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableVariantDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariantDetail(val *VariantDetail) *NullableVariantDetail {
	return &NullableVariantDetail{value: val, isSet: true}
}

func (v NullableVariantDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariantDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


