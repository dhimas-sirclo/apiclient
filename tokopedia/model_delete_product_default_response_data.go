/*
Tokopedia API

Tokopedia API

API version: 1.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokopedia

import (
	"encoding/json"
)

// checks if the DeleteProductDefaultResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteProductDefaultResponseData{}

// DeleteProductDefaultResponseData struct for DeleteProductDefaultResponseData
type DeleteProductDefaultResponseData struct {
	TotalData *int64 `json:"total_data,omitempty"`
	SucceedRows *int64 `json:"succeed_rows,omitempty"`
	FailedRows *int64 `json:"failed_rows,omitempty"`
	FailedRowsData []string `json:"failed_rows_data,omitempty"`
}

// NewDeleteProductDefaultResponseData instantiates a new DeleteProductDefaultResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteProductDefaultResponseData() *DeleteProductDefaultResponseData {
	this := DeleteProductDefaultResponseData{}
	return &this
}

// NewDeleteProductDefaultResponseDataWithDefaults instantiates a new DeleteProductDefaultResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteProductDefaultResponseDataWithDefaults() *DeleteProductDefaultResponseData {
	this := DeleteProductDefaultResponseData{}
	return &this
}

// GetTotalData returns the TotalData field value if set, zero value otherwise.
func (o *DeleteProductDefaultResponseData) GetTotalData() int64 {
	if o == nil || IsNil(o.TotalData) {
		var ret int64
		return ret
	}
	return *o.TotalData
}

// GetTotalDataOk returns a tuple with the TotalData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteProductDefaultResponseData) GetTotalDataOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalData) {
		return nil, false
	}
	return o.TotalData, true
}

// HasTotalData returns a boolean if a field has been set.
func (o *DeleteProductDefaultResponseData) HasTotalData() bool {
	if o != nil && !IsNil(o.TotalData) {
		return true
	}

	return false
}

// SetTotalData gets a reference to the given int64 and assigns it to the TotalData field.
func (o *DeleteProductDefaultResponseData) SetTotalData(v int64) {
	o.TotalData = &v
}

// GetSucceedRows returns the SucceedRows field value if set, zero value otherwise.
func (o *DeleteProductDefaultResponseData) GetSucceedRows() int64 {
	if o == nil || IsNil(o.SucceedRows) {
		var ret int64
		return ret
	}
	return *o.SucceedRows
}

// GetSucceedRowsOk returns a tuple with the SucceedRows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteProductDefaultResponseData) GetSucceedRowsOk() (*int64, bool) {
	if o == nil || IsNil(o.SucceedRows) {
		return nil, false
	}
	return o.SucceedRows, true
}

// HasSucceedRows returns a boolean if a field has been set.
func (o *DeleteProductDefaultResponseData) HasSucceedRows() bool {
	if o != nil && !IsNil(o.SucceedRows) {
		return true
	}

	return false
}

// SetSucceedRows gets a reference to the given int64 and assigns it to the SucceedRows field.
func (o *DeleteProductDefaultResponseData) SetSucceedRows(v int64) {
	o.SucceedRows = &v
}

// GetFailedRows returns the FailedRows field value if set, zero value otherwise.
func (o *DeleteProductDefaultResponseData) GetFailedRows() int64 {
	if o == nil || IsNil(o.FailedRows) {
		var ret int64
		return ret
	}
	return *o.FailedRows
}

// GetFailedRowsOk returns a tuple with the FailedRows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteProductDefaultResponseData) GetFailedRowsOk() (*int64, bool) {
	if o == nil || IsNil(o.FailedRows) {
		return nil, false
	}
	return o.FailedRows, true
}

// HasFailedRows returns a boolean if a field has been set.
func (o *DeleteProductDefaultResponseData) HasFailedRows() bool {
	if o != nil && !IsNil(o.FailedRows) {
		return true
	}

	return false
}

// SetFailedRows gets a reference to the given int64 and assigns it to the FailedRows field.
func (o *DeleteProductDefaultResponseData) SetFailedRows(v int64) {
	o.FailedRows = &v
}

// GetFailedRowsData returns the FailedRowsData field value if set, zero value otherwise.
func (o *DeleteProductDefaultResponseData) GetFailedRowsData() []string {
	if o == nil || IsNil(o.FailedRowsData) {
		var ret []string
		return ret
	}
	return o.FailedRowsData
}

// GetFailedRowsDataOk returns a tuple with the FailedRowsData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteProductDefaultResponseData) GetFailedRowsDataOk() ([]string, bool) {
	if o == nil || IsNil(o.FailedRowsData) {
		return nil, false
	}
	return o.FailedRowsData, true
}

// HasFailedRowsData returns a boolean if a field has been set.
func (o *DeleteProductDefaultResponseData) HasFailedRowsData() bool {
	if o != nil && !IsNil(o.FailedRowsData) {
		return true
	}

	return false
}

// SetFailedRowsData gets a reference to the given []string and assigns it to the FailedRowsData field.
func (o *DeleteProductDefaultResponseData) SetFailedRowsData(v []string) {
	o.FailedRowsData = v
}

func (o DeleteProductDefaultResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteProductDefaultResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TotalData) {
		toSerialize["total_data"] = o.TotalData
	}
	if !IsNil(o.SucceedRows) {
		toSerialize["succeed_rows"] = o.SucceedRows
	}
	if !IsNil(o.FailedRows) {
		toSerialize["failed_rows"] = o.FailedRows
	}
	if !IsNil(o.FailedRowsData) {
		toSerialize["failed_rows_data"] = o.FailedRowsData
	}
	return toSerialize, nil
}

type NullableDeleteProductDefaultResponseData struct {
	value *DeleteProductDefaultResponseData
	isSet bool
}

func (v NullableDeleteProductDefaultResponseData) Get() *DeleteProductDefaultResponseData {
	return v.value
}

func (v *NullableDeleteProductDefaultResponseData) Set(val *DeleteProductDefaultResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteProductDefaultResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteProductDefaultResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteProductDefaultResponseData(val *DeleteProductDefaultResponseData) *NullableDeleteProductDefaultResponseData {
	return &NullableDeleteProductDefaultResponseData{value: val, isSet: true}
}

func (v NullableDeleteProductDefaultResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteProductDefaultResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


