/*
Tokopedia

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokopedia

import (
	"encoding/json"
)

// checks if the ProductStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductStats{}

// ProductStats struct for ProductStats
type ProductStats struct {
	CountView *int64 `json:"countView,omitempty"`
}

// NewProductStats instantiates a new ProductStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductStats() *ProductStats {
	this := ProductStats{}
	return &this
}

// NewProductStatsWithDefaults instantiates a new ProductStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductStatsWithDefaults() *ProductStats {
	this := ProductStats{}
	return &this
}

// GetCountView returns the CountView field value if set, zero value otherwise.
func (o *ProductStats) GetCountView() int64 {
	if o == nil || IsNil(o.CountView) {
		var ret int64
		return ret
	}
	return *o.CountView
}

// GetCountViewOk returns a tuple with the CountView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductStats) GetCountViewOk() (*int64, bool) {
	if o == nil || IsNil(o.CountView) {
		return nil, false
	}
	return o.CountView, true
}

// HasCountView returns a boolean if a field has been set.
func (o *ProductStats) HasCountView() bool {
	if o != nil && !IsNil(o.CountView) {
		return true
	}

	return false
}

// SetCountView gets a reference to the given int64 and assigns it to the CountView field.
func (o *ProductStats) SetCountView(v int64) {
	o.CountView = &v
}

func (o ProductStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CountView) {
		toSerialize["countView"] = o.CountView
	}
	return toSerialize, nil
}

type NullableProductStats struct {
	value *ProductStats
	isSet bool
}

func (v NullableProductStats) Get() *ProductStats {
	return v.value
}

func (v *NullableProductStats) Set(val *ProductStats) {
	v.value = val
	v.isSet = true
}

func (v NullableProductStats) IsSet() bool {
	return v.isSet
}

func (v *NullableProductStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductStats(val *ProductStats) *NullableProductStats {
	return &NullableProductStats{value: val, isSet: true}
}

func (v NullableProductStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


