/*
Tokopedia API

Tokopedia API

API version: 1.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokopedia

import (
	"encoding/json"
)

// checks if the CancelBundle200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CancelBundle200Response{}

// CancelBundle200Response struct for CancelBundle200Response
type CancelBundle200Response struct {
	Header *ResponseHeader `json:"header,omitempty"`
	Data *CancelBundle200ResponseData `json:"data,omitempty"`
}

// NewCancelBundle200Response instantiates a new CancelBundle200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancelBundle200Response() *CancelBundle200Response {
	this := CancelBundle200Response{}
	return &this
}

// NewCancelBundle200ResponseWithDefaults instantiates a new CancelBundle200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancelBundle200ResponseWithDefaults() *CancelBundle200Response {
	this := CancelBundle200Response{}
	return &this
}

// GetHeader returns the Header field value if set, zero value otherwise.
func (o *CancelBundle200Response) GetHeader() ResponseHeader {
	if o == nil || IsNil(o.Header) {
		var ret ResponseHeader
		return ret
	}
	return *o.Header
}

// GetHeaderOk returns a tuple with the Header field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelBundle200Response) GetHeaderOk() (*ResponseHeader, bool) {
	if o == nil || IsNil(o.Header) {
		return nil, false
	}
	return o.Header, true
}

// HasHeader returns a boolean if a field has been set.
func (o *CancelBundle200Response) HasHeader() bool {
	if o != nil && !IsNil(o.Header) {
		return true
	}

	return false
}

// SetHeader gets a reference to the given ResponseHeader and assigns it to the Header field.
func (o *CancelBundle200Response) SetHeader(v ResponseHeader) {
	o.Header = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *CancelBundle200Response) GetData() CancelBundle200ResponseData {
	if o == nil || IsNil(o.Data) {
		var ret CancelBundle200ResponseData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancelBundle200Response) GetDataOk() (*CancelBundle200ResponseData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *CancelBundle200Response) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given CancelBundle200ResponseData and assigns it to the Data field.
func (o *CancelBundle200Response) SetData(v CancelBundle200ResponseData) {
	o.Data = &v
}

func (o CancelBundle200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CancelBundle200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Header) {
		toSerialize["header"] = o.Header
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableCancelBundle200Response struct {
	value *CancelBundle200Response
	isSet bool
}

func (v NullableCancelBundle200Response) Get() *CancelBundle200Response {
	return v.value
}

func (v *NullableCancelBundle200Response) Set(val *CancelBundle200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelBundle200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelBundle200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelBundle200Response(val *CancelBundle200Response) *NullableCancelBundle200Response {
	return &NullableCancelBundle200Response{value: val, isSet: true}
}

func (v NullableCancelBundle200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelBundle200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


