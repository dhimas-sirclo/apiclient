/*
Tokopedia API

Tokopedia API

API version: 1.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokopedia

import (
	"encoding/json"
)

// checks if the UpdatePriceDefaultResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatePriceDefaultResponseData{}

// UpdatePriceDefaultResponseData struct for UpdatePriceDefaultResponseData
type UpdatePriceDefaultResponseData struct {
	SucceedRows *int64 `json:"succeed_rows,omitempty"`
	FailedRows *int64 `json:"failed_rows,omitempty"`
	FailedRowsData []UpdatePriceDefaultResponseDataFailedRowsDataInner `json:"failed_rows_data,omitempty"`
}

// NewUpdatePriceDefaultResponseData instantiates a new UpdatePriceDefaultResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePriceDefaultResponseData() *UpdatePriceDefaultResponseData {
	this := UpdatePriceDefaultResponseData{}
	return &this
}

// NewUpdatePriceDefaultResponseDataWithDefaults instantiates a new UpdatePriceDefaultResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePriceDefaultResponseDataWithDefaults() *UpdatePriceDefaultResponseData {
	this := UpdatePriceDefaultResponseData{}
	return &this
}

// GetSucceedRows returns the SucceedRows field value if set, zero value otherwise.
func (o *UpdatePriceDefaultResponseData) GetSucceedRows() int64 {
	if o == nil || IsNil(o.SucceedRows) {
		var ret int64
		return ret
	}
	return *o.SucceedRows
}

// GetSucceedRowsOk returns a tuple with the SucceedRows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePriceDefaultResponseData) GetSucceedRowsOk() (*int64, bool) {
	if o == nil || IsNil(o.SucceedRows) {
		return nil, false
	}
	return o.SucceedRows, true
}

// HasSucceedRows returns a boolean if a field has been set.
func (o *UpdatePriceDefaultResponseData) HasSucceedRows() bool {
	if o != nil && !IsNil(o.SucceedRows) {
		return true
	}

	return false
}

// SetSucceedRows gets a reference to the given int64 and assigns it to the SucceedRows field.
func (o *UpdatePriceDefaultResponseData) SetSucceedRows(v int64) {
	o.SucceedRows = &v
}

// GetFailedRows returns the FailedRows field value if set, zero value otherwise.
func (o *UpdatePriceDefaultResponseData) GetFailedRows() int64 {
	if o == nil || IsNil(o.FailedRows) {
		var ret int64
		return ret
	}
	return *o.FailedRows
}

// GetFailedRowsOk returns a tuple with the FailedRows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePriceDefaultResponseData) GetFailedRowsOk() (*int64, bool) {
	if o == nil || IsNil(o.FailedRows) {
		return nil, false
	}
	return o.FailedRows, true
}

// HasFailedRows returns a boolean if a field has been set.
func (o *UpdatePriceDefaultResponseData) HasFailedRows() bool {
	if o != nil && !IsNil(o.FailedRows) {
		return true
	}

	return false
}

// SetFailedRows gets a reference to the given int64 and assigns it to the FailedRows field.
func (o *UpdatePriceDefaultResponseData) SetFailedRows(v int64) {
	o.FailedRows = &v
}

// GetFailedRowsData returns the FailedRowsData field value if set, zero value otherwise.
func (o *UpdatePriceDefaultResponseData) GetFailedRowsData() []UpdatePriceDefaultResponseDataFailedRowsDataInner {
	if o == nil || IsNil(o.FailedRowsData) {
		var ret []UpdatePriceDefaultResponseDataFailedRowsDataInner
		return ret
	}
	return o.FailedRowsData
}

// GetFailedRowsDataOk returns a tuple with the FailedRowsData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePriceDefaultResponseData) GetFailedRowsDataOk() ([]UpdatePriceDefaultResponseDataFailedRowsDataInner, bool) {
	if o == nil || IsNil(o.FailedRowsData) {
		return nil, false
	}
	return o.FailedRowsData, true
}

// HasFailedRowsData returns a boolean if a field has been set.
func (o *UpdatePriceDefaultResponseData) HasFailedRowsData() bool {
	if o != nil && !IsNil(o.FailedRowsData) {
		return true
	}

	return false
}

// SetFailedRowsData gets a reference to the given []UpdatePriceDefaultResponseDataFailedRowsDataInner and assigns it to the FailedRowsData field.
func (o *UpdatePriceDefaultResponseData) SetFailedRowsData(v []UpdatePriceDefaultResponseDataFailedRowsDataInner) {
	o.FailedRowsData = v
}

func (o UpdatePriceDefaultResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatePriceDefaultResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SucceedRows) {
		toSerialize["succeed_rows"] = o.SucceedRows
	}
	if !IsNil(o.FailedRows) {
		toSerialize["failed_rows"] = o.FailedRows
	}
	if !IsNil(o.FailedRowsData) {
		toSerialize["failed_rows_data"] = o.FailedRowsData
	}
	return toSerialize, nil
}

type NullableUpdatePriceDefaultResponseData struct {
	value *UpdatePriceDefaultResponseData
	isSet bool
}

func (v NullableUpdatePriceDefaultResponseData) Get() *UpdatePriceDefaultResponseData {
	return v.value
}

func (v *NullableUpdatePriceDefaultResponseData) Set(val *UpdatePriceDefaultResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePriceDefaultResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePriceDefaultResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePriceDefaultResponseData(val *UpdatePriceDefaultResponseData) *NullableUpdatePriceDefaultResponseData {
	return &NullableUpdatePriceDefaultResponseData{value: val, isSet: true}
}

func (v NullableUpdatePriceDefaultResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePriceDefaultResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


