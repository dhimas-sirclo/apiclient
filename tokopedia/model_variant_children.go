/*
Tokopedia API

Tokopedia API

API version: 1.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokopedia

import (
	"encoding/json"
)

// checks if the VariantChildren type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VariantChildren{}

// VariantChildren struct for VariantChildren
type VariantChildren struct {
	Name *string `json:"name,omitempty"`
	Url *string `json:"url,omitempty"`
	ProductId *int32 `json:"product_id,omitempty"`
	Price *int32 `json:"price,omitempty"`
	PriceFmt *string `json:"price_fmt,omitempty"`
	Stock *int32 `json:"stock,omitempty"`
	MainStock *int32 `json:"main_stock,omitempty"`
	ReserveStock *int32 `json:"reserve_stock,omitempty"`
	Sku *string `json:"sku,omitempty"`
	OptionIds []int32 `json:"option_ids,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	IsBuyable *bool `json:"is_buyable,omitempty"`
	IsWishlist *bool `json:"is_wishlist,omitempty"`
	Picture *VariantPicture `json:"picture,omitempty"`
	Campaign *VariantCampaign `json:"campaign,omitempty"`
	AlwaysAvailable *bool `json:"always_available,omitempty"`
	StockWording *string `json:"stock_wording,omitempty"`
	OtherVariantStock *string `json:"other_variant_stock,omitempty"`
	IsLimitedStock *bool `json:"is_limited_stock,omitempty"`
}

// NewVariantChildren instantiates a new VariantChildren object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariantChildren() *VariantChildren {
	this := VariantChildren{}
	return &this
}

// NewVariantChildrenWithDefaults instantiates a new VariantChildren object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariantChildrenWithDefaults() *VariantChildren {
	this := VariantChildren{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VariantChildren) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantChildren) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VariantChildren) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VariantChildren) SetName(v string) {
	o.Name = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *VariantChildren) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantChildren) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *VariantChildren) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *VariantChildren) SetUrl(v string) {
	o.Url = &v
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *VariantChildren) GetProductId() int32 {
	if o == nil || IsNil(o.ProductId) {
		var ret int32
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantChildren) GetProductIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *VariantChildren) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given int32 and assigns it to the ProductId field.
func (o *VariantChildren) SetProductId(v int32) {
	o.ProductId = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *VariantChildren) GetPrice() int32 {
	if o == nil || IsNil(o.Price) {
		var ret int32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantChildren) GetPriceOk() (*int32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *VariantChildren) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given int32 and assigns it to the Price field.
func (o *VariantChildren) SetPrice(v int32) {
	o.Price = &v
}

// GetPriceFmt returns the PriceFmt field value if set, zero value otherwise.
func (o *VariantChildren) GetPriceFmt() string {
	if o == nil || IsNil(o.PriceFmt) {
		var ret string
		return ret
	}
	return *o.PriceFmt
}

// GetPriceFmtOk returns a tuple with the PriceFmt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantChildren) GetPriceFmtOk() (*string, bool) {
	if o == nil || IsNil(o.PriceFmt) {
		return nil, false
	}
	return o.PriceFmt, true
}

// HasPriceFmt returns a boolean if a field has been set.
func (o *VariantChildren) HasPriceFmt() bool {
	if o != nil && !IsNil(o.PriceFmt) {
		return true
	}

	return false
}

// SetPriceFmt gets a reference to the given string and assigns it to the PriceFmt field.
func (o *VariantChildren) SetPriceFmt(v string) {
	o.PriceFmt = &v
}

// GetStock returns the Stock field value if set, zero value otherwise.
func (o *VariantChildren) GetStock() int32 {
	if o == nil || IsNil(o.Stock) {
		var ret int32
		return ret
	}
	return *o.Stock
}

// GetStockOk returns a tuple with the Stock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantChildren) GetStockOk() (*int32, bool) {
	if o == nil || IsNil(o.Stock) {
		return nil, false
	}
	return o.Stock, true
}

// HasStock returns a boolean if a field has been set.
func (o *VariantChildren) HasStock() bool {
	if o != nil && !IsNil(o.Stock) {
		return true
	}

	return false
}

// SetStock gets a reference to the given int32 and assigns it to the Stock field.
func (o *VariantChildren) SetStock(v int32) {
	o.Stock = &v
}

// GetMainStock returns the MainStock field value if set, zero value otherwise.
func (o *VariantChildren) GetMainStock() int32 {
	if o == nil || IsNil(o.MainStock) {
		var ret int32
		return ret
	}
	return *o.MainStock
}

// GetMainStockOk returns a tuple with the MainStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantChildren) GetMainStockOk() (*int32, bool) {
	if o == nil || IsNil(o.MainStock) {
		return nil, false
	}
	return o.MainStock, true
}

// HasMainStock returns a boolean if a field has been set.
func (o *VariantChildren) HasMainStock() bool {
	if o != nil && !IsNil(o.MainStock) {
		return true
	}

	return false
}

// SetMainStock gets a reference to the given int32 and assigns it to the MainStock field.
func (o *VariantChildren) SetMainStock(v int32) {
	o.MainStock = &v
}

// GetReserveStock returns the ReserveStock field value if set, zero value otherwise.
func (o *VariantChildren) GetReserveStock() int32 {
	if o == nil || IsNil(o.ReserveStock) {
		var ret int32
		return ret
	}
	return *o.ReserveStock
}

// GetReserveStockOk returns a tuple with the ReserveStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantChildren) GetReserveStockOk() (*int32, bool) {
	if o == nil || IsNil(o.ReserveStock) {
		return nil, false
	}
	return o.ReserveStock, true
}

// HasReserveStock returns a boolean if a field has been set.
func (o *VariantChildren) HasReserveStock() bool {
	if o != nil && !IsNil(o.ReserveStock) {
		return true
	}

	return false
}

// SetReserveStock gets a reference to the given int32 and assigns it to the ReserveStock field.
func (o *VariantChildren) SetReserveStock(v int32) {
	o.ReserveStock = &v
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *VariantChildren) GetSku() string {
	if o == nil || IsNil(o.Sku) {
		var ret string
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantChildren) GetSkuOk() (*string, bool) {
	if o == nil || IsNil(o.Sku) {
		return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *VariantChildren) HasSku() bool {
	if o != nil && !IsNil(o.Sku) {
		return true
	}

	return false
}

// SetSku gets a reference to the given string and assigns it to the Sku field.
func (o *VariantChildren) SetSku(v string) {
	o.Sku = &v
}

// GetOptionIds returns the OptionIds field value if set, zero value otherwise.
func (o *VariantChildren) GetOptionIds() []int32 {
	if o == nil || IsNil(o.OptionIds) {
		var ret []int32
		return ret
	}
	return o.OptionIds
}

// GetOptionIdsOk returns a tuple with the OptionIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantChildren) GetOptionIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.OptionIds) {
		return nil, false
	}
	return o.OptionIds, true
}

// HasOptionIds returns a boolean if a field has been set.
func (o *VariantChildren) HasOptionIds() bool {
	if o != nil && !IsNil(o.OptionIds) {
		return true
	}

	return false
}

// SetOptionIds gets a reference to the given []int32 and assigns it to the OptionIds field.
func (o *VariantChildren) SetOptionIds(v []int32) {
	o.OptionIds = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *VariantChildren) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantChildren) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *VariantChildren) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *VariantChildren) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetIsBuyable returns the IsBuyable field value if set, zero value otherwise.
func (o *VariantChildren) GetIsBuyable() bool {
	if o == nil || IsNil(o.IsBuyable) {
		var ret bool
		return ret
	}
	return *o.IsBuyable
}

// GetIsBuyableOk returns a tuple with the IsBuyable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantChildren) GetIsBuyableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBuyable) {
		return nil, false
	}
	return o.IsBuyable, true
}

// HasIsBuyable returns a boolean if a field has been set.
func (o *VariantChildren) HasIsBuyable() bool {
	if o != nil && !IsNil(o.IsBuyable) {
		return true
	}

	return false
}

// SetIsBuyable gets a reference to the given bool and assigns it to the IsBuyable field.
func (o *VariantChildren) SetIsBuyable(v bool) {
	o.IsBuyable = &v
}

// GetIsWishlist returns the IsWishlist field value if set, zero value otherwise.
func (o *VariantChildren) GetIsWishlist() bool {
	if o == nil || IsNil(o.IsWishlist) {
		var ret bool
		return ret
	}
	return *o.IsWishlist
}

// GetIsWishlistOk returns a tuple with the IsWishlist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantChildren) GetIsWishlistOk() (*bool, bool) {
	if o == nil || IsNil(o.IsWishlist) {
		return nil, false
	}
	return o.IsWishlist, true
}

// HasIsWishlist returns a boolean if a field has been set.
func (o *VariantChildren) HasIsWishlist() bool {
	if o != nil && !IsNil(o.IsWishlist) {
		return true
	}

	return false
}

// SetIsWishlist gets a reference to the given bool and assigns it to the IsWishlist field.
func (o *VariantChildren) SetIsWishlist(v bool) {
	o.IsWishlist = &v
}

// GetPicture returns the Picture field value if set, zero value otherwise.
func (o *VariantChildren) GetPicture() VariantPicture {
	if o == nil || IsNil(o.Picture) {
		var ret VariantPicture
		return ret
	}
	return *o.Picture
}

// GetPictureOk returns a tuple with the Picture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantChildren) GetPictureOk() (*VariantPicture, bool) {
	if o == nil || IsNil(o.Picture) {
		return nil, false
	}
	return o.Picture, true
}

// HasPicture returns a boolean if a field has been set.
func (o *VariantChildren) HasPicture() bool {
	if o != nil && !IsNil(o.Picture) {
		return true
	}

	return false
}

// SetPicture gets a reference to the given VariantPicture and assigns it to the Picture field.
func (o *VariantChildren) SetPicture(v VariantPicture) {
	o.Picture = &v
}

// GetCampaign returns the Campaign field value if set, zero value otherwise.
func (o *VariantChildren) GetCampaign() VariantCampaign {
	if o == nil || IsNil(o.Campaign) {
		var ret VariantCampaign
		return ret
	}
	return *o.Campaign
}

// GetCampaignOk returns a tuple with the Campaign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantChildren) GetCampaignOk() (*VariantCampaign, bool) {
	if o == nil || IsNil(o.Campaign) {
		return nil, false
	}
	return o.Campaign, true
}

// HasCampaign returns a boolean if a field has been set.
func (o *VariantChildren) HasCampaign() bool {
	if o != nil && !IsNil(o.Campaign) {
		return true
	}

	return false
}

// SetCampaign gets a reference to the given VariantCampaign and assigns it to the Campaign field.
func (o *VariantChildren) SetCampaign(v VariantCampaign) {
	o.Campaign = &v
}

// GetAlwaysAvailable returns the AlwaysAvailable field value if set, zero value otherwise.
func (o *VariantChildren) GetAlwaysAvailable() bool {
	if o == nil || IsNil(o.AlwaysAvailable) {
		var ret bool
		return ret
	}
	return *o.AlwaysAvailable
}

// GetAlwaysAvailableOk returns a tuple with the AlwaysAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantChildren) GetAlwaysAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.AlwaysAvailable) {
		return nil, false
	}
	return o.AlwaysAvailable, true
}

// HasAlwaysAvailable returns a boolean if a field has been set.
func (o *VariantChildren) HasAlwaysAvailable() bool {
	if o != nil && !IsNil(o.AlwaysAvailable) {
		return true
	}

	return false
}

// SetAlwaysAvailable gets a reference to the given bool and assigns it to the AlwaysAvailable field.
func (o *VariantChildren) SetAlwaysAvailable(v bool) {
	o.AlwaysAvailable = &v
}

// GetStockWording returns the StockWording field value if set, zero value otherwise.
func (o *VariantChildren) GetStockWording() string {
	if o == nil || IsNil(o.StockWording) {
		var ret string
		return ret
	}
	return *o.StockWording
}

// GetStockWordingOk returns a tuple with the StockWording field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantChildren) GetStockWordingOk() (*string, bool) {
	if o == nil || IsNil(o.StockWording) {
		return nil, false
	}
	return o.StockWording, true
}

// HasStockWording returns a boolean if a field has been set.
func (o *VariantChildren) HasStockWording() bool {
	if o != nil && !IsNil(o.StockWording) {
		return true
	}

	return false
}

// SetStockWording gets a reference to the given string and assigns it to the StockWording field.
func (o *VariantChildren) SetStockWording(v string) {
	o.StockWording = &v
}

// GetOtherVariantStock returns the OtherVariantStock field value if set, zero value otherwise.
func (o *VariantChildren) GetOtherVariantStock() string {
	if o == nil || IsNil(o.OtherVariantStock) {
		var ret string
		return ret
	}
	return *o.OtherVariantStock
}

// GetOtherVariantStockOk returns a tuple with the OtherVariantStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantChildren) GetOtherVariantStockOk() (*string, bool) {
	if o == nil || IsNil(o.OtherVariantStock) {
		return nil, false
	}
	return o.OtherVariantStock, true
}

// HasOtherVariantStock returns a boolean if a field has been set.
func (o *VariantChildren) HasOtherVariantStock() bool {
	if o != nil && !IsNil(o.OtherVariantStock) {
		return true
	}

	return false
}

// SetOtherVariantStock gets a reference to the given string and assigns it to the OtherVariantStock field.
func (o *VariantChildren) SetOtherVariantStock(v string) {
	o.OtherVariantStock = &v
}

// GetIsLimitedStock returns the IsLimitedStock field value if set, zero value otherwise.
func (o *VariantChildren) GetIsLimitedStock() bool {
	if o == nil || IsNil(o.IsLimitedStock) {
		var ret bool
		return ret
	}
	return *o.IsLimitedStock
}

// GetIsLimitedStockOk returns a tuple with the IsLimitedStock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantChildren) GetIsLimitedStockOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLimitedStock) {
		return nil, false
	}
	return o.IsLimitedStock, true
}

// HasIsLimitedStock returns a boolean if a field has been set.
func (o *VariantChildren) HasIsLimitedStock() bool {
	if o != nil && !IsNil(o.IsLimitedStock) {
		return true
	}

	return false
}

// SetIsLimitedStock gets a reference to the given bool and assigns it to the IsLimitedStock field.
func (o *VariantChildren) SetIsLimitedStock(v bool) {
	o.IsLimitedStock = &v
}

func (o VariantChildren) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VariantChildren) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.ProductId) {
		toSerialize["product_id"] = o.ProductId
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.PriceFmt) {
		toSerialize["price_fmt"] = o.PriceFmt
	}
	if !IsNil(o.Stock) {
		toSerialize["stock"] = o.Stock
	}
	if !IsNil(o.MainStock) {
		toSerialize["main_stock"] = o.MainStock
	}
	if !IsNil(o.ReserveStock) {
		toSerialize["reserve_stock"] = o.ReserveStock
	}
	if !IsNil(o.Sku) {
		toSerialize["sku"] = o.Sku
	}
	if !IsNil(o.OptionIds) {
		toSerialize["option_ids"] = o.OptionIds
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.IsBuyable) {
		toSerialize["is_buyable"] = o.IsBuyable
	}
	if !IsNil(o.IsWishlist) {
		toSerialize["is_wishlist"] = o.IsWishlist
	}
	if !IsNil(o.Picture) {
		toSerialize["picture"] = o.Picture
	}
	if !IsNil(o.Campaign) {
		toSerialize["campaign"] = o.Campaign
	}
	if !IsNil(o.AlwaysAvailable) {
		toSerialize["always_available"] = o.AlwaysAvailable
	}
	if !IsNil(o.StockWording) {
		toSerialize["stock_wording"] = o.StockWording
	}
	if !IsNil(o.OtherVariantStock) {
		toSerialize["other_variant_stock"] = o.OtherVariantStock
	}
	if !IsNil(o.IsLimitedStock) {
		toSerialize["is_limited_stock"] = o.IsLimitedStock
	}
	return toSerialize, nil
}

type NullableVariantChildren struct {
	value *VariantChildren
	isSet bool
}

func (v NullableVariantChildren) Get() *VariantChildren {
	return v.value
}

func (v *NullableVariantChildren) Set(val *VariantChildren) {
	v.value = val
	v.isSet = true
}

func (v NullableVariantChildren) IsSet() bool {
	return v.isSet
}

func (v *NullableVariantChildren) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariantChildren(val *VariantChildren) *NullableVariantChildren {
	return &NullableVariantChildren{value: val, isSet: true}
}

func (v NullableVariantChildren) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariantChildren) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


