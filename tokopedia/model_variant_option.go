/*
Tokopedia API

Tokopedia API

API version: 1.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokopedia

import (
	"encoding/json"
)

// checks if the VariantOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VariantOption{}

// VariantOption struct for VariantOption
type VariantOption struct {
	Id *int64 `json:"id,omitempty"`
	Value *string `json:"value,omitempty"`
	Hex *string `json:"hex,omitempty"`
}

// NewVariantOption instantiates a new VariantOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariantOption() *VariantOption {
	this := VariantOption{}
	return &this
}

// NewVariantOptionWithDefaults instantiates a new VariantOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariantOptionWithDefaults() *VariantOption {
	this := VariantOption{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VariantOption) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantOption) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VariantOption) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *VariantOption) SetId(v int64) {
	o.Id = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *VariantOption) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantOption) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *VariantOption) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *VariantOption) SetValue(v string) {
	o.Value = &v
}

// GetHex returns the Hex field value if set, zero value otherwise.
func (o *VariantOption) GetHex() string {
	if o == nil || IsNil(o.Hex) {
		var ret string
		return ret
	}
	return *o.Hex
}

// GetHexOk returns a tuple with the Hex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantOption) GetHexOk() (*string, bool) {
	if o == nil || IsNil(o.Hex) {
		return nil, false
	}
	return o.Hex, true
}

// HasHex returns a boolean if a field has been set.
func (o *VariantOption) HasHex() bool {
	if o != nil && !IsNil(o.Hex) {
		return true
	}

	return false
}

// SetHex gets a reference to the given string and assigns it to the Hex field.
func (o *VariantOption) SetHex(v string) {
	o.Hex = &v
}

func (o VariantOption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VariantOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Hex) {
		toSerialize["hex"] = o.Hex
	}
	return toSerialize, nil
}

type NullableVariantOption struct {
	value *VariantOption
	isSet bool
}

func (v NullableVariantOption) Get() *VariantOption {
	return v.value
}

func (v *NullableVariantOption) Set(val *VariantOption) {
	v.value = val
	v.isSet = true
}

func (v NullableVariantOption) IsSet() bool {
	return v.isSet
}

func (v *NullableVariantOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariantOption(val *VariantOption) *NullableVariantOption {
	return &NullableVariantOption{value: val, isSet: true}
}

func (v NullableVariantOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariantOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


