/*
Tokopedia API

Tokopedia API

API version: 1.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokopedia

import (
	"encoding/json"
)

// checks if the VariantVariant type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VariantVariant{}

// VariantVariant struct for VariantVariant
type VariantVariant struct {
	Name *string `json:"name,omitempty"`
	Identifier *string `json:"identifier,omitempty"`
	UnitName *string `json:"unit_name,omitempty"`
	Position *int32 `json:"position,omitempty"`
	Option []VariantOption `json:"option,omitempty"`
}

// NewVariantVariant instantiates a new VariantVariant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariantVariant() *VariantVariant {
	this := VariantVariant{}
	return &this
}

// NewVariantVariantWithDefaults instantiates a new VariantVariant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariantVariantWithDefaults() *VariantVariant {
	this := VariantVariant{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VariantVariant) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantVariant) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VariantVariant) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VariantVariant) SetName(v string) {
	o.Name = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *VariantVariant) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantVariant) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *VariantVariant) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *VariantVariant) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetUnitName returns the UnitName field value if set, zero value otherwise.
func (o *VariantVariant) GetUnitName() string {
	if o == nil || IsNil(o.UnitName) {
		var ret string
		return ret
	}
	return *o.UnitName
}

// GetUnitNameOk returns a tuple with the UnitName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantVariant) GetUnitNameOk() (*string, bool) {
	if o == nil || IsNil(o.UnitName) {
		return nil, false
	}
	return o.UnitName, true
}

// HasUnitName returns a boolean if a field has been set.
func (o *VariantVariant) HasUnitName() bool {
	if o != nil && !IsNil(o.UnitName) {
		return true
	}

	return false
}

// SetUnitName gets a reference to the given string and assigns it to the UnitName field.
func (o *VariantVariant) SetUnitName(v string) {
	o.UnitName = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *VariantVariant) GetPosition() int32 {
	if o == nil || IsNil(o.Position) {
		var ret int32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantVariant) GetPositionOk() (*int32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *VariantVariant) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int32 and assigns it to the Position field.
func (o *VariantVariant) SetPosition(v int32) {
	o.Position = &v
}

// GetOption returns the Option field value if set, zero value otherwise.
func (o *VariantVariant) GetOption() []VariantOption {
	if o == nil || IsNil(o.Option) {
		var ret []VariantOption
		return ret
	}
	return o.Option
}

// GetOptionOk returns a tuple with the Option field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariantVariant) GetOptionOk() ([]VariantOption, bool) {
	if o == nil || IsNil(o.Option) {
		return nil, false
	}
	return o.Option, true
}

// HasOption returns a boolean if a field has been set.
func (o *VariantVariant) HasOption() bool {
	if o != nil && !IsNil(o.Option) {
		return true
	}

	return false
}

// SetOption gets a reference to the given []VariantOption and assigns it to the Option field.
func (o *VariantVariant) SetOption(v []VariantOption) {
	o.Option = v
}

func (o VariantVariant) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VariantVariant) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.UnitName) {
		toSerialize["unit_name"] = o.UnitName
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.Option) {
		toSerialize["option"] = o.Option
	}
	return toSerialize, nil
}

type NullableVariantVariant struct {
	value *VariantVariant
	isSet bool
}

func (v NullableVariantVariant) Get() *VariantVariant {
	return v.value
}

func (v *NullableVariantVariant) Set(val *VariantVariant) {
	v.value = val
	v.isSet = true
}

func (v NullableVariantVariant) IsSet() bool {
	return v.isSet
}

func (v *NullableVariantVariant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariantVariant(val *VariantVariant) *NullableVariantVariant {
	return &NullableVariantVariant{value: val, isSet: true}
}

func (v NullableVariantVariant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariantVariant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


