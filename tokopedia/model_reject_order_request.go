/*
Tokopedia API

Tokopedia API

API version: 1.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokopedia

import (
	"encoding/json"
)

// checks if the RejectOrderRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RejectOrderRequest{}

// RejectOrderRequest struct for RejectOrderRequest
type RejectOrderRequest struct {
	// Order reject reason: * empty/0 - Only for reject shipping case - reason required with max length 200 characters * 1 - Product(s) out of stock * 2 - Product variant unavailable * 3 - Wrong price or weight * 4 - Shop closed. close_end and closed_note required * 5 - Others * 7 - Courier problem - reason required with max length 200 characters * 8 - Buyerâ€™s request - reason required with max length 200 characters 
	ReasonCode *int64 `json:"reason_code,omitempty"`
	Reason *string `json:"reason,omitempty"`
	// format: 17/05/2017 
	ShopCloseEndDate *string `json:"shop_close_end_date,omitempty"`
	ShopCloseNote *string `json:"shop_close_note,omitempty"`
	EmptyProducts []int64 `json:"empty_products,omitempty"`
}

// NewRejectOrderRequest instantiates a new RejectOrderRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRejectOrderRequest() *RejectOrderRequest {
	this := RejectOrderRequest{}
	return &this
}

// NewRejectOrderRequestWithDefaults instantiates a new RejectOrderRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRejectOrderRequestWithDefaults() *RejectOrderRequest {
	this := RejectOrderRequest{}
	return &this
}

// GetReasonCode returns the ReasonCode field value if set, zero value otherwise.
func (o *RejectOrderRequest) GetReasonCode() int64 {
	if o == nil || IsNil(o.ReasonCode) {
		var ret int64
		return ret
	}
	return *o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RejectOrderRequest) GetReasonCodeOk() (*int64, bool) {
	if o == nil || IsNil(o.ReasonCode) {
		return nil, false
	}
	return o.ReasonCode, true
}

// HasReasonCode returns a boolean if a field has been set.
func (o *RejectOrderRequest) HasReasonCode() bool {
	if o != nil && !IsNil(o.ReasonCode) {
		return true
	}

	return false
}

// SetReasonCode gets a reference to the given int64 and assigns it to the ReasonCode field.
func (o *RejectOrderRequest) SetReasonCode(v int64) {
	o.ReasonCode = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *RejectOrderRequest) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RejectOrderRequest) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *RejectOrderRequest) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *RejectOrderRequest) SetReason(v string) {
	o.Reason = &v
}

// GetShopCloseEndDate returns the ShopCloseEndDate field value if set, zero value otherwise.
func (o *RejectOrderRequest) GetShopCloseEndDate() string {
	if o == nil || IsNil(o.ShopCloseEndDate) {
		var ret string
		return ret
	}
	return *o.ShopCloseEndDate
}

// GetShopCloseEndDateOk returns a tuple with the ShopCloseEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RejectOrderRequest) GetShopCloseEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.ShopCloseEndDate) {
		return nil, false
	}
	return o.ShopCloseEndDate, true
}

// HasShopCloseEndDate returns a boolean if a field has been set.
func (o *RejectOrderRequest) HasShopCloseEndDate() bool {
	if o != nil && !IsNil(o.ShopCloseEndDate) {
		return true
	}

	return false
}

// SetShopCloseEndDate gets a reference to the given string and assigns it to the ShopCloseEndDate field.
func (o *RejectOrderRequest) SetShopCloseEndDate(v string) {
	o.ShopCloseEndDate = &v
}

// GetShopCloseNote returns the ShopCloseNote field value if set, zero value otherwise.
func (o *RejectOrderRequest) GetShopCloseNote() string {
	if o == nil || IsNil(o.ShopCloseNote) {
		var ret string
		return ret
	}
	return *o.ShopCloseNote
}

// GetShopCloseNoteOk returns a tuple with the ShopCloseNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RejectOrderRequest) GetShopCloseNoteOk() (*string, bool) {
	if o == nil || IsNil(o.ShopCloseNote) {
		return nil, false
	}
	return o.ShopCloseNote, true
}

// HasShopCloseNote returns a boolean if a field has been set.
func (o *RejectOrderRequest) HasShopCloseNote() bool {
	if o != nil && !IsNil(o.ShopCloseNote) {
		return true
	}

	return false
}

// SetShopCloseNote gets a reference to the given string and assigns it to the ShopCloseNote field.
func (o *RejectOrderRequest) SetShopCloseNote(v string) {
	o.ShopCloseNote = &v
}

// GetEmptyProducts returns the EmptyProducts field value if set, zero value otherwise.
func (o *RejectOrderRequest) GetEmptyProducts() []int64 {
	if o == nil || IsNil(o.EmptyProducts) {
		var ret []int64
		return ret
	}
	return o.EmptyProducts
}

// GetEmptyProductsOk returns a tuple with the EmptyProducts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RejectOrderRequest) GetEmptyProductsOk() ([]int64, bool) {
	if o == nil || IsNil(o.EmptyProducts) {
		return nil, false
	}
	return o.EmptyProducts, true
}

// HasEmptyProducts returns a boolean if a field has been set.
func (o *RejectOrderRequest) HasEmptyProducts() bool {
	if o != nil && !IsNil(o.EmptyProducts) {
		return true
	}

	return false
}

// SetEmptyProducts gets a reference to the given []int64 and assigns it to the EmptyProducts field.
func (o *RejectOrderRequest) SetEmptyProducts(v []int64) {
	o.EmptyProducts = v
}

func (o RejectOrderRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RejectOrderRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReasonCode) {
		toSerialize["reason_code"] = o.ReasonCode
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.ShopCloseEndDate) {
		toSerialize["shop_close_end_date"] = o.ShopCloseEndDate
	}
	if !IsNil(o.ShopCloseNote) {
		toSerialize["shop_close_note"] = o.ShopCloseNote
	}
	if !IsNil(o.EmptyProducts) {
		toSerialize["empty_products"] = o.EmptyProducts
	}
	return toSerialize, nil
}

type NullableRejectOrderRequest struct {
	value *RejectOrderRequest
	isSet bool
}

func (v NullableRejectOrderRequest) Get() *RejectOrderRequest {
	return v.value
}

func (v *NullableRejectOrderRequest) Set(val *RejectOrderRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRejectOrderRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRejectOrderRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRejectOrderRequest(val *RejectOrderRequest) *NullableRejectOrderRequest {
	return &NullableRejectOrderRequest{value: val, isSet: true}
}

func (v NullableRejectOrderRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRejectOrderRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


