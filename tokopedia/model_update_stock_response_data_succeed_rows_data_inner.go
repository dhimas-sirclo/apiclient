/*
Tokopedia API

Tokopedia API

API version: 1.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokopedia

import (
	"encoding/json"
)

// checks if the UpdateStockResponseDataSucceedRowsDataInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateStockResponseDataSucceedRowsDataInner{}

// UpdateStockResponseDataSucceedRowsDataInner struct for UpdateStockResponseDataSucceedRowsDataInner
type UpdateStockResponseDataSucceedRowsDataInner struct {
	ProductID *int64 `json:"productID,omitempty"`
	WarehouseID *int64 `json:"warehouseID,omitempty"`
	ShopID *int64 `json:"shopID,omitempty"`
	Stock *int64 `json:"stock,omitempty"`
	Price *int64 `json:"price,omitempty"`
}

// NewUpdateStockResponseDataSucceedRowsDataInner instantiates a new UpdateStockResponseDataSucceedRowsDataInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateStockResponseDataSucceedRowsDataInner() *UpdateStockResponseDataSucceedRowsDataInner {
	this := UpdateStockResponseDataSucceedRowsDataInner{}
	return &this
}

// NewUpdateStockResponseDataSucceedRowsDataInnerWithDefaults instantiates a new UpdateStockResponseDataSucceedRowsDataInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateStockResponseDataSucceedRowsDataInnerWithDefaults() *UpdateStockResponseDataSucceedRowsDataInner {
	this := UpdateStockResponseDataSucceedRowsDataInner{}
	return &this
}

// GetProductID returns the ProductID field value if set, zero value otherwise.
func (o *UpdateStockResponseDataSucceedRowsDataInner) GetProductID() int64 {
	if o == nil || IsNil(o.ProductID) {
		var ret int64
		return ret
	}
	return *o.ProductID
}

// GetProductIDOk returns a tuple with the ProductID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStockResponseDataSucceedRowsDataInner) GetProductIDOk() (*int64, bool) {
	if o == nil || IsNil(o.ProductID) {
		return nil, false
	}
	return o.ProductID, true
}

// HasProductID returns a boolean if a field has been set.
func (o *UpdateStockResponseDataSucceedRowsDataInner) HasProductID() bool {
	if o != nil && !IsNil(o.ProductID) {
		return true
	}

	return false
}

// SetProductID gets a reference to the given int64 and assigns it to the ProductID field.
func (o *UpdateStockResponseDataSucceedRowsDataInner) SetProductID(v int64) {
	o.ProductID = &v
}

// GetWarehouseID returns the WarehouseID field value if set, zero value otherwise.
func (o *UpdateStockResponseDataSucceedRowsDataInner) GetWarehouseID() int64 {
	if o == nil || IsNil(o.WarehouseID) {
		var ret int64
		return ret
	}
	return *o.WarehouseID
}

// GetWarehouseIDOk returns a tuple with the WarehouseID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStockResponseDataSucceedRowsDataInner) GetWarehouseIDOk() (*int64, bool) {
	if o == nil || IsNil(o.WarehouseID) {
		return nil, false
	}
	return o.WarehouseID, true
}

// HasWarehouseID returns a boolean if a field has been set.
func (o *UpdateStockResponseDataSucceedRowsDataInner) HasWarehouseID() bool {
	if o != nil && !IsNil(o.WarehouseID) {
		return true
	}

	return false
}

// SetWarehouseID gets a reference to the given int64 and assigns it to the WarehouseID field.
func (o *UpdateStockResponseDataSucceedRowsDataInner) SetWarehouseID(v int64) {
	o.WarehouseID = &v
}

// GetShopID returns the ShopID field value if set, zero value otherwise.
func (o *UpdateStockResponseDataSucceedRowsDataInner) GetShopID() int64 {
	if o == nil || IsNil(o.ShopID) {
		var ret int64
		return ret
	}
	return *o.ShopID
}

// GetShopIDOk returns a tuple with the ShopID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStockResponseDataSucceedRowsDataInner) GetShopIDOk() (*int64, bool) {
	if o == nil || IsNil(o.ShopID) {
		return nil, false
	}
	return o.ShopID, true
}

// HasShopID returns a boolean if a field has been set.
func (o *UpdateStockResponseDataSucceedRowsDataInner) HasShopID() bool {
	if o != nil && !IsNil(o.ShopID) {
		return true
	}

	return false
}

// SetShopID gets a reference to the given int64 and assigns it to the ShopID field.
func (o *UpdateStockResponseDataSucceedRowsDataInner) SetShopID(v int64) {
	o.ShopID = &v
}

// GetStock returns the Stock field value if set, zero value otherwise.
func (o *UpdateStockResponseDataSucceedRowsDataInner) GetStock() int64 {
	if o == nil || IsNil(o.Stock) {
		var ret int64
		return ret
	}
	return *o.Stock
}

// GetStockOk returns a tuple with the Stock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStockResponseDataSucceedRowsDataInner) GetStockOk() (*int64, bool) {
	if o == nil || IsNil(o.Stock) {
		return nil, false
	}
	return o.Stock, true
}

// HasStock returns a boolean if a field has been set.
func (o *UpdateStockResponseDataSucceedRowsDataInner) HasStock() bool {
	if o != nil && !IsNil(o.Stock) {
		return true
	}

	return false
}

// SetStock gets a reference to the given int64 and assigns it to the Stock field.
func (o *UpdateStockResponseDataSucceedRowsDataInner) SetStock(v int64) {
	o.Stock = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *UpdateStockResponseDataSucceedRowsDataInner) GetPrice() int64 {
	if o == nil || IsNil(o.Price) {
		var ret int64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStockResponseDataSucceedRowsDataInner) GetPriceOk() (*int64, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *UpdateStockResponseDataSucceedRowsDataInner) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given int64 and assigns it to the Price field.
func (o *UpdateStockResponseDataSucceedRowsDataInner) SetPrice(v int64) {
	o.Price = &v
}

func (o UpdateStockResponseDataSucceedRowsDataInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateStockResponseDataSucceedRowsDataInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProductID) {
		toSerialize["productID"] = o.ProductID
	}
	if !IsNil(o.WarehouseID) {
		toSerialize["warehouseID"] = o.WarehouseID
	}
	if !IsNil(o.ShopID) {
		toSerialize["shopID"] = o.ShopID
	}
	if !IsNil(o.Stock) {
		toSerialize["stock"] = o.Stock
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	return toSerialize, nil
}

type NullableUpdateStockResponseDataSucceedRowsDataInner struct {
	value *UpdateStockResponseDataSucceedRowsDataInner
	isSet bool
}

func (v NullableUpdateStockResponseDataSucceedRowsDataInner) Get() *UpdateStockResponseDataSucceedRowsDataInner {
	return v.value
}

func (v *NullableUpdateStockResponseDataSucceedRowsDataInner) Set(val *UpdateStockResponseDataSucceedRowsDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateStockResponseDataSucceedRowsDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateStockResponseDataSucceedRowsDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateStockResponseDataSucceedRowsDataInner(val *UpdateStockResponseDataSucceedRowsDataInner) *NullableUpdateStockResponseDataSucceedRowsDataInner {
	return &NullableUpdateStockResponseDataSucceedRowsDataInner{value: val, isSet: true}
}

func (v NullableUpdateStockResponseDataSucceedRowsDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateStockResponseDataSucceedRowsDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


