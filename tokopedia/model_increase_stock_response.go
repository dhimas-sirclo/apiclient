/*
Tokopedia API

Tokopedia API

API version: 1.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokopedia

import (
	"encoding/json"
)

// checks if the IncreaseStockResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IncreaseStockResponse{}

// IncreaseStockResponse struct for IncreaseStockResponse
type IncreaseStockResponse struct {
	Header *ResponseHeader `json:"header,omitempty"`
	Data *IncreaseStockResponseData `json:"data,omitempty"`
}

// NewIncreaseStockResponse instantiates a new IncreaseStockResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncreaseStockResponse() *IncreaseStockResponse {
	this := IncreaseStockResponse{}
	return &this
}

// NewIncreaseStockResponseWithDefaults instantiates a new IncreaseStockResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncreaseStockResponseWithDefaults() *IncreaseStockResponse {
	this := IncreaseStockResponse{}
	return &this
}

// GetHeader returns the Header field value if set, zero value otherwise.
func (o *IncreaseStockResponse) GetHeader() ResponseHeader {
	if o == nil || IsNil(o.Header) {
		var ret ResponseHeader
		return ret
	}
	return *o.Header
}

// GetHeaderOk returns a tuple with the Header field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncreaseStockResponse) GetHeaderOk() (*ResponseHeader, bool) {
	if o == nil || IsNil(o.Header) {
		return nil, false
	}
	return o.Header, true
}

// HasHeader returns a boolean if a field has been set.
func (o *IncreaseStockResponse) HasHeader() bool {
	if o != nil && !IsNil(o.Header) {
		return true
	}

	return false
}

// SetHeader gets a reference to the given ResponseHeader and assigns it to the Header field.
func (o *IncreaseStockResponse) SetHeader(v ResponseHeader) {
	o.Header = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *IncreaseStockResponse) GetData() IncreaseStockResponseData {
	if o == nil || IsNil(o.Data) {
		var ret IncreaseStockResponseData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncreaseStockResponse) GetDataOk() (*IncreaseStockResponseData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *IncreaseStockResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given IncreaseStockResponseData and assigns it to the Data field.
func (o *IncreaseStockResponse) SetData(v IncreaseStockResponseData) {
	o.Data = &v
}

func (o IncreaseStockResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IncreaseStockResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Header) {
		toSerialize["header"] = o.Header
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableIncreaseStockResponse struct {
	value *IncreaseStockResponse
	isSet bool
}

func (v NullableIncreaseStockResponse) Get() *IncreaseStockResponse {
	return v.value
}

func (v *NullableIncreaseStockResponse) Set(val *IncreaseStockResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableIncreaseStockResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableIncreaseStockResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncreaseStockResponse(val *IncreaseStockResponse) *NullableIncreaseStockResponse {
	return &NullableIncreaseStockResponse{value: val, isSet: true}
}

func (v NullableIncreaseStockResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncreaseStockResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


