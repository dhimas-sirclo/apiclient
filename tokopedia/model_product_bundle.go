/*
Tokopedia API

Tokopedia API

API version: 1.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokopedia

import (
	"encoding/json"
)

// checks if the ProductBundle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductBundle{}

// ProductBundle struct for ProductBundle
type ProductBundle struct {
	// Bundle Unique Identifier
	BundleID *int64 `json:"bundleID,omitempty"`
	// Bundle Name
	Name *string `json:"Name,omitempty"`
	// Bundle Type
	Type *int64 `json:"Type,omitempty"`
	// Bundle Status
	Status *int64 `json:"status,omitempty"`
	// Shop Unique Identifier
	ShopID *int64 `json:"shopID,omitempty"`
	// Bundle Start Time
	StartTimeUnix *int64 `json:"startTimeUnix,omitempty"`
	// Bundle End Time
	StopTimeUnix *int64 `json:"stopTimeUnix,omitempty"`
}

// NewProductBundle instantiates a new ProductBundle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductBundle() *ProductBundle {
	this := ProductBundle{}
	return &this
}

// NewProductBundleWithDefaults instantiates a new ProductBundle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductBundleWithDefaults() *ProductBundle {
	this := ProductBundle{}
	return &this
}

// GetBundleID returns the BundleID field value if set, zero value otherwise.
func (o *ProductBundle) GetBundleID() int64 {
	if o == nil || IsNil(o.BundleID) {
		var ret int64
		return ret
	}
	return *o.BundleID
}

// GetBundleIDOk returns a tuple with the BundleID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductBundle) GetBundleIDOk() (*int64, bool) {
	if o == nil || IsNil(o.BundleID) {
		return nil, false
	}
	return o.BundleID, true
}

// HasBundleID returns a boolean if a field has been set.
func (o *ProductBundle) HasBundleID() bool {
	if o != nil && !IsNil(o.BundleID) {
		return true
	}

	return false
}

// SetBundleID gets a reference to the given int64 and assigns it to the BundleID field.
func (o *ProductBundle) SetBundleID(v int64) {
	o.BundleID = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProductBundle) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductBundle) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProductBundle) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProductBundle) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ProductBundle) GetType() int64 {
	if o == nil || IsNil(o.Type) {
		var ret int64
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductBundle) GetTypeOk() (*int64, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ProductBundle) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given int64 and assigns it to the Type field.
func (o *ProductBundle) SetType(v int64) {
	o.Type = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ProductBundle) GetStatus() int64 {
	if o == nil || IsNil(o.Status) {
		var ret int64
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductBundle) GetStatusOk() (*int64, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ProductBundle) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int64 and assigns it to the Status field.
func (o *ProductBundle) SetStatus(v int64) {
	o.Status = &v
}

// GetShopID returns the ShopID field value if set, zero value otherwise.
func (o *ProductBundle) GetShopID() int64 {
	if o == nil || IsNil(o.ShopID) {
		var ret int64
		return ret
	}
	return *o.ShopID
}

// GetShopIDOk returns a tuple with the ShopID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductBundle) GetShopIDOk() (*int64, bool) {
	if o == nil || IsNil(o.ShopID) {
		return nil, false
	}
	return o.ShopID, true
}

// HasShopID returns a boolean if a field has been set.
func (o *ProductBundle) HasShopID() bool {
	if o != nil && !IsNil(o.ShopID) {
		return true
	}

	return false
}

// SetShopID gets a reference to the given int64 and assigns it to the ShopID field.
func (o *ProductBundle) SetShopID(v int64) {
	o.ShopID = &v
}

// GetStartTimeUnix returns the StartTimeUnix field value if set, zero value otherwise.
func (o *ProductBundle) GetStartTimeUnix() int64 {
	if o == nil || IsNil(o.StartTimeUnix) {
		var ret int64
		return ret
	}
	return *o.StartTimeUnix
}

// GetStartTimeUnixOk returns a tuple with the StartTimeUnix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductBundle) GetStartTimeUnixOk() (*int64, bool) {
	if o == nil || IsNil(o.StartTimeUnix) {
		return nil, false
	}
	return o.StartTimeUnix, true
}

// HasStartTimeUnix returns a boolean if a field has been set.
func (o *ProductBundle) HasStartTimeUnix() bool {
	if o != nil && !IsNil(o.StartTimeUnix) {
		return true
	}

	return false
}

// SetStartTimeUnix gets a reference to the given int64 and assigns it to the StartTimeUnix field.
func (o *ProductBundle) SetStartTimeUnix(v int64) {
	o.StartTimeUnix = &v
}

// GetStopTimeUnix returns the StopTimeUnix field value if set, zero value otherwise.
func (o *ProductBundle) GetStopTimeUnix() int64 {
	if o == nil || IsNil(o.StopTimeUnix) {
		var ret int64
		return ret
	}
	return *o.StopTimeUnix
}

// GetStopTimeUnixOk returns a tuple with the StopTimeUnix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductBundle) GetStopTimeUnixOk() (*int64, bool) {
	if o == nil || IsNil(o.StopTimeUnix) {
		return nil, false
	}
	return o.StopTimeUnix, true
}

// HasStopTimeUnix returns a boolean if a field has been set.
func (o *ProductBundle) HasStopTimeUnix() bool {
	if o != nil && !IsNil(o.StopTimeUnix) {
		return true
	}

	return false
}

// SetStopTimeUnix gets a reference to the given int64 and assigns it to the StopTimeUnix field.
func (o *ProductBundle) SetStopTimeUnix(v int64) {
	o.StopTimeUnix = &v
}

func (o ProductBundle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductBundle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BundleID) {
		toSerialize["bundleID"] = o.BundleID
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.ShopID) {
		toSerialize["shopID"] = o.ShopID
	}
	if !IsNil(o.StartTimeUnix) {
		toSerialize["startTimeUnix"] = o.StartTimeUnix
	}
	if !IsNil(o.StopTimeUnix) {
		toSerialize["stopTimeUnix"] = o.StopTimeUnix
	}
	return toSerialize, nil
}

type NullableProductBundle struct {
	value *ProductBundle
	isSet bool
}

func (v NullableProductBundle) Get() *ProductBundle {
	return v.value
}

func (v *NullableProductBundle) Set(val *ProductBundle) {
	v.value = val
	v.isSet = true
}

func (v NullableProductBundle) IsSet() bool {
	return v.isSet
}

func (v *NullableProductBundle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductBundle(val *ProductBundle) *NullableProductBundle {
	return &NullableProductBundle{value: val, isSet: true}
}

func (v NullableProductBundle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductBundle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


