/*
Tokopedia API

Tokopedia API

API version: 1.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokopedia

import (
	"encoding/json"
)

// checks if the UpdateStockResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateStockResponseData{}

// UpdateStockResponseData struct for UpdateStockResponseData
type UpdateStockResponseData struct {
	FailedRows *int64 `json:"failed_rows,omitempty"`
	FailedRowsData []UpdateStockResponseDataFailedRowsDataInner `json:"failed_rows_data,omitempty"`
	SucceedRows *int64 `json:"succeed_rows,omitempty"`
}

// NewUpdateStockResponseData instantiates a new UpdateStockResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateStockResponseData() *UpdateStockResponseData {
	this := UpdateStockResponseData{}
	return &this
}

// NewUpdateStockResponseDataWithDefaults instantiates a new UpdateStockResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateStockResponseDataWithDefaults() *UpdateStockResponseData {
	this := UpdateStockResponseData{}
	return &this
}

// GetFailedRows returns the FailedRows field value if set, zero value otherwise.
func (o *UpdateStockResponseData) GetFailedRows() int64 {
	if o == nil || IsNil(o.FailedRows) {
		var ret int64
		return ret
	}
	return *o.FailedRows
}

// GetFailedRowsOk returns a tuple with the FailedRows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStockResponseData) GetFailedRowsOk() (*int64, bool) {
	if o == nil || IsNil(o.FailedRows) {
		return nil, false
	}
	return o.FailedRows, true
}

// HasFailedRows returns a boolean if a field has been set.
func (o *UpdateStockResponseData) HasFailedRows() bool {
	if o != nil && !IsNil(o.FailedRows) {
		return true
	}

	return false
}

// SetFailedRows gets a reference to the given int64 and assigns it to the FailedRows field.
func (o *UpdateStockResponseData) SetFailedRows(v int64) {
	o.FailedRows = &v
}

// GetFailedRowsData returns the FailedRowsData field value if set, zero value otherwise.
func (o *UpdateStockResponseData) GetFailedRowsData() []UpdateStockResponseDataFailedRowsDataInner {
	if o == nil || IsNil(o.FailedRowsData) {
		var ret []UpdateStockResponseDataFailedRowsDataInner
		return ret
	}
	return o.FailedRowsData
}

// GetFailedRowsDataOk returns a tuple with the FailedRowsData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStockResponseData) GetFailedRowsDataOk() ([]UpdateStockResponseDataFailedRowsDataInner, bool) {
	if o == nil || IsNil(o.FailedRowsData) {
		return nil, false
	}
	return o.FailedRowsData, true
}

// HasFailedRowsData returns a boolean if a field has been set.
func (o *UpdateStockResponseData) HasFailedRowsData() bool {
	if o != nil && !IsNil(o.FailedRowsData) {
		return true
	}

	return false
}

// SetFailedRowsData gets a reference to the given []UpdateStockResponseDataFailedRowsDataInner and assigns it to the FailedRowsData field.
func (o *UpdateStockResponseData) SetFailedRowsData(v []UpdateStockResponseDataFailedRowsDataInner) {
	o.FailedRowsData = v
}

// GetSucceedRows returns the SucceedRows field value if set, zero value otherwise.
func (o *UpdateStockResponseData) GetSucceedRows() int64 {
	if o == nil || IsNil(o.SucceedRows) {
		var ret int64
		return ret
	}
	return *o.SucceedRows
}

// GetSucceedRowsOk returns a tuple with the SucceedRows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStockResponseData) GetSucceedRowsOk() (*int64, bool) {
	if o == nil || IsNil(o.SucceedRows) {
		return nil, false
	}
	return o.SucceedRows, true
}

// HasSucceedRows returns a boolean if a field has been set.
func (o *UpdateStockResponseData) HasSucceedRows() bool {
	if o != nil && !IsNil(o.SucceedRows) {
		return true
	}

	return false
}

// SetSucceedRows gets a reference to the given int64 and assigns it to the SucceedRows field.
func (o *UpdateStockResponseData) SetSucceedRows(v int64) {
	o.SucceedRows = &v
}

func (o UpdateStockResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateStockResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FailedRows) {
		toSerialize["failed_rows"] = o.FailedRows
	}
	if !IsNil(o.FailedRowsData) {
		toSerialize["failed_rows_data"] = o.FailedRowsData
	}
	if !IsNil(o.SucceedRows) {
		toSerialize["succeed_rows"] = o.SucceedRows
	}
	return toSerialize, nil
}

type NullableUpdateStockResponseData struct {
	value *UpdateStockResponseData
	isSet bool
}

func (v NullableUpdateStockResponseData) Get() *UpdateStockResponseData {
	return v.value
}

func (v *NullableUpdateStockResponseData) Set(val *UpdateStockResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateStockResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateStockResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateStockResponseData(val *UpdateStockResponseData) *NullableUpdateStockResponseData {
	return &NullableUpdateStockResponseData{value: val, isSet: true}
}

func (v NullableUpdateStockResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateStockResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


