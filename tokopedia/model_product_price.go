/*
Tokopedia

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokopedia

import (
	"encoding/json"
)

// checks if the ProductPrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductPrice{}

// ProductPrice struct for ProductPrice
type ProductPrice struct {
	// Product Price Value
	Value *int64 `json:"value,omitempty"`
	// Product Price Currency
	Currency *int64 `json:"currency,omitempty"`
	// Product Price Last Updated timer
	LastUpdateUnix *int64 `json:"LastUpdateUnix,omitempty"`
	// Price Value
	Idr *int64 `json:"idr,omitempty"`
}

// NewProductPrice instantiates a new ProductPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductPrice() *ProductPrice {
	this := ProductPrice{}
	return &this
}

// NewProductPriceWithDefaults instantiates a new ProductPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductPriceWithDefaults() *ProductPrice {
	this := ProductPrice{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ProductPrice) GetValue() int64 {
	if o == nil || IsNil(o.Value) {
		var ret int64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPrice) GetValueOk() (*int64, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ProductPrice) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given int64 and assigns it to the Value field.
func (o *ProductPrice) SetValue(v int64) {
	o.Value = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *ProductPrice) GetCurrency() int64 {
	if o == nil || IsNil(o.Currency) {
		var ret int64
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPrice) GetCurrencyOk() (*int64, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *ProductPrice) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given int64 and assigns it to the Currency field.
func (o *ProductPrice) SetCurrency(v int64) {
	o.Currency = &v
}

// GetLastUpdateUnix returns the LastUpdateUnix field value if set, zero value otherwise.
func (o *ProductPrice) GetLastUpdateUnix() int64 {
	if o == nil || IsNil(o.LastUpdateUnix) {
		var ret int64
		return ret
	}
	return *o.LastUpdateUnix
}

// GetLastUpdateUnixOk returns a tuple with the LastUpdateUnix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPrice) GetLastUpdateUnixOk() (*int64, bool) {
	if o == nil || IsNil(o.LastUpdateUnix) {
		return nil, false
	}
	return o.LastUpdateUnix, true
}

// HasLastUpdateUnix returns a boolean if a field has been set.
func (o *ProductPrice) HasLastUpdateUnix() bool {
	if o != nil && !IsNil(o.LastUpdateUnix) {
		return true
	}

	return false
}

// SetLastUpdateUnix gets a reference to the given int64 and assigns it to the LastUpdateUnix field.
func (o *ProductPrice) SetLastUpdateUnix(v int64) {
	o.LastUpdateUnix = &v
}

// GetIdr returns the Idr field value if set, zero value otherwise.
func (o *ProductPrice) GetIdr() int64 {
	if o == nil || IsNil(o.Idr) {
		var ret int64
		return ret
	}
	return *o.Idr
}

// GetIdrOk returns a tuple with the Idr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductPrice) GetIdrOk() (*int64, bool) {
	if o == nil || IsNil(o.Idr) {
		return nil, false
	}
	return o.Idr, true
}

// HasIdr returns a boolean if a field has been set.
func (o *ProductPrice) HasIdr() bool {
	if o != nil && !IsNil(o.Idr) {
		return true
	}

	return false
}

// SetIdr gets a reference to the given int64 and assigns it to the Idr field.
func (o *ProductPrice) SetIdr(v int64) {
	o.Idr = &v
}

func (o ProductPrice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductPrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.LastUpdateUnix) {
		toSerialize["LastUpdateUnix"] = o.LastUpdateUnix
	}
	if !IsNil(o.Idr) {
		toSerialize["idr"] = o.Idr
	}
	return toSerialize, nil
}

type NullableProductPrice struct {
	value *ProductPrice
	isSet bool
}

func (v NullableProductPrice) Get() *ProductPrice {
	return v.value
}

func (v *NullableProductPrice) Set(val *ProductPrice) {
	v.value = val
	v.isSet = true
}

func (v NullableProductPrice) IsSet() bool {
	return v.isSet
}

func (v *NullableProductPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductPrice(val *ProductPrice) *NullableProductPrice {
	return &NullableProductPrice{value: val, isSet: true}
}

func (v NullableProductPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


