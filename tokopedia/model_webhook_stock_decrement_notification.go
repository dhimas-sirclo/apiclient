/*
Tokopedia API

Tokopedia API

API version: 1.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokopedia

import (
	"encoding/json"
)

// checks if the WebhookStockDecrementNotification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebhookStockDecrementNotification{}

// WebhookStockDecrementNotification Stock Decrement is notification that show information decrement stock into new value. This notification will be trigger when : - New Order with Payment Verified Status (order status 220) - Hit Open API Update Stock - Created new reserve stock by join campaign 
type WebhookStockDecrementNotification struct {
	// Fulfillment service unique identifier
	FsId *int64 `json:"fs_id,omitempty"`
	// Products changes data
	ProductChangesData []WebhookStockDecrementNotificationProductChangesDataInner `json:"product_changes_data,omitempty"`
}

// NewWebhookStockDecrementNotification instantiates a new WebhookStockDecrementNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookStockDecrementNotification() *WebhookStockDecrementNotification {
	this := WebhookStockDecrementNotification{}
	return &this
}

// NewWebhookStockDecrementNotificationWithDefaults instantiates a new WebhookStockDecrementNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookStockDecrementNotificationWithDefaults() *WebhookStockDecrementNotification {
	this := WebhookStockDecrementNotification{}
	return &this
}

// GetFsId returns the FsId field value if set, zero value otherwise.
func (o *WebhookStockDecrementNotification) GetFsId() int64 {
	if o == nil || IsNil(o.FsId) {
		var ret int64
		return ret
	}
	return *o.FsId
}

// GetFsIdOk returns a tuple with the FsId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookStockDecrementNotification) GetFsIdOk() (*int64, bool) {
	if o == nil || IsNil(o.FsId) {
		return nil, false
	}
	return o.FsId, true
}

// HasFsId returns a boolean if a field has been set.
func (o *WebhookStockDecrementNotification) HasFsId() bool {
	if o != nil && !IsNil(o.FsId) {
		return true
	}

	return false
}

// SetFsId gets a reference to the given int64 and assigns it to the FsId field.
func (o *WebhookStockDecrementNotification) SetFsId(v int64) {
	o.FsId = &v
}

// GetProductChangesData returns the ProductChangesData field value if set, zero value otherwise.
func (o *WebhookStockDecrementNotification) GetProductChangesData() []WebhookStockDecrementNotificationProductChangesDataInner {
	if o == nil || IsNil(o.ProductChangesData) {
		var ret []WebhookStockDecrementNotificationProductChangesDataInner
		return ret
	}
	return o.ProductChangesData
}

// GetProductChangesDataOk returns a tuple with the ProductChangesData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookStockDecrementNotification) GetProductChangesDataOk() ([]WebhookStockDecrementNotificationProductChangesDataInner, bool) {
	if o == nil || IsNil(o.ProductChangesData) {
		return nil, false
	}
	return o.ProductChangesData, true
}

// HasProductChangesData returns a boolean if a field has been set.
func (o *WebhookStockDecrementNotification) HasProductChangesData() bool {
	if o != nil && !IsNil(o.ProductChangesData) {
		return true
	}

	return false
}

// SetProductChangesData gets a reference to the given []WebhookStockDecrementNotificationProductChangesDataInner and assigns it to the ProductChangesData field.
func (o *WebhookStockDecrementNotification) SetProductChangesData(v []WebhookStockDecrementNotificationProductChangesDataInner) {
	o.ProductChangesData = v
}

func (o WebhookStockDecrementNotification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebhookStockDecrementNotification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FsId) {
		toSerialize["fs_id"] = o.FsId
	}
	if !IsNil(o.ProductChangesData) {
		toSerialize["product_changes_data"] = o.ProductChangesData
	}
	return toSerialize, nil
}

type NullableWebhookStockDecrementNotification struct {
	value *WebhookStockDecrementNotification
	isSet bool
}

func (v NullableWebhookStockDecrementNotification) Get() *WebhookStockDecrementNotification {
	return v.value
}

func (v *NullableWebhookStockDecrementNotification) Set(val *WebhookStockDecrementNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookStockDecrementNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookStockDecrementNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookStockDecrementNotification(val *WebhookStockDecrementNotification) *NullableWebhookStockDecrementNotification {
	return &NullableWebhookStockDecrementNotification{value: val, isSet: true}
}

func (v NullableWebhookStockDecrementNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookStockDecrementNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


