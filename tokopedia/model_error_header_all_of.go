/*
Tokopedia

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokopedia

import (
	"encoding/json"
)

// checks if the ErrorHeaderAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorHeaderAllOf{}

// ErrorHeaderAllOf struct for ErrorHeaderAllOf
type ErrorHeaderAllOf struct {
	Reason *string `json:"reason,omitempty"`
	ErrorCode *string `json:"error_code,omitempty"`
}

// NewErrorHeaderAllOf instantiates a new ErrorHeaderAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorHeaderAllOf() *ErrorHeaderAllOf {
	this := ErrorHeaderAllOf{}
	return &this
}

// NewErrorHeaderAllOfWithDefaults instantiates a new ErrorHeaderAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorHeaderAllOfWithDefaults() *ErrorHeaderAllOf {
	this := ErrorHeaderAllOf{}
	return &this
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ErrorHeaderAllOf) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorHeaderAllOf) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ErrorHeaderAllOf) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *ErrorHeaderAllOf) SetReason(v string) {
	o.Reason = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *ErrorHeaderAllOf) GetErrorCode() string {
	if o == nil || IsNil(o.ErrorCode) {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorHeaderAllOf) GetErrorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *ErrorHeaderAllOf) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *ErrorHeaderAllOf) SetErrorCode(v string) {
	o.ErrorCode = &v
}

func (o ErrorHeaderAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorHeaderAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.ErrorCode) {
		toSerialize["error_code"] = o.ErrorCode
	}
	return toSerialize, nil
}

type NullableErrorHeaderAllOf struct {
	value *ErrorHeaderAllOf
	isSet bool
}

func (v NullableErrorHeaderAllOf) Get() *ErrorHeaderAllOf {
	return v.value
}

func (v *NullableErrorHeaderAllOf) Set(val *ErrorHeaderAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorHeaderAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorHeaderAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorHeaderAllOf(val *ErrorHeaderAllOf) *NullableErrorHeaderAllOf {
	return &NullableErrorHeaderAllOf{value: val, isSet: true}
}

func (v NullableErrorHeaderAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorHeaderAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


