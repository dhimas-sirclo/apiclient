/*
Tokopedia API

Tokopedia API

API version: 1.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokopedia

import (
	"encoding/json"
)

// checks if the ProductWeight type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductWeight{}

// ProductWeight struct for ProductWeight
type ProductWeight struct {
	// Product Weight Value
	Value *int64 `json:"value,omitempty"`
	// Weight (e.g., 1 for Gram, 2 for Kilogram)
	Unit *int64 `json:"unit,omitempty"`
}

// NewProductWeight instantiates a new ProductWeight object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductWeight() *ProductWeight {
	this := ProductWeight{}
	return &this
}

// NewProductWeightWithDefaults instantiates a new ProductWeight object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductWeightWithDefaults() *ProductWeight {
	this := ProductWeight{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ProductWeight) GetValue() int64 {
	if o == nil || IsNil(o.Value) {
		var ret int64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductWeight) GetValueOk() (*int64, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ProductWeight) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given int64 and assigns it to the Value field.
func (o *ProductWeight) SetValue(v int64) {
	o.Value = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *ProductWeight) GetUnit() int64 {
	if o == nil || IsNil(o.Unit) {
		var ret int64
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductWeight) GetUnitOk() (*int64, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *ProductWeight) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given int64 and assigns it to the Unit field.
func (o *ProductWeight) SetUnit(v int64) {
	o.Unit = &v
}

func (o ProductWeight) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductWeight) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	return toSerialize, nil
}

type NullableProductWeight struct {
	value *ProductWeight
	isSet bool
}

func (v NullableProductWeight) Get() *ProductWeight {
	return v.value
}

func (v *NullableProductWeight) Set(val *ProductWeight) {
	v.value = val
	v.isSet = true
}

func (v NullableProductWeight) IsSet() bool {
	return v.isSet
}

func (v *NullableProductWeight) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductWeight(val *ProductWeight) *NullableProductWeight {
	return &NullableProductWeight{value: val, isSet: true}
}

func (v NullableProductWeight) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductWeight) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


