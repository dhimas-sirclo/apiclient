/*
SIRCLO Open API

SIRCLO Open API

API version: 1.0.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sirclo

import (
	"encoding/json"
)

// checks if the UpsertProductCategoriesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpsertProductCategoriesResponse{}

// UpsertProductCategoriesResponse struct for UpsertProductCategoriesResponse
type UpsertProductCategoriesResponse struct {
	FailureCategory []ProductCategory `json:"failure_category,omitempty"`
	TotalFailureCategory *int32 `json:"total_failure_category,omitempty"`
	TotalSuccessCategory *int32 `json:"total_success_category,omitempty"`
	TotalCategory *int32 `json:"total_category,omitempty"`
}

// NewUpsertProductCategoriesResponse instantiates a new UpsertProductCategoriesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpsertProductCategoriesResponse() *UpsertProductCategoriesResponse {
	this := UpsertProductCategoriesResponse{}
	return &this
}

// NewUpsertProductCategoriesResponseWithDefaults instantiates a new UpsertProductCategoriesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpsertProductCategoriesResponseWithDefaults() *UpsertProductCategoriesResponse {
	this := UpsertProductCategoriesResponse{}
	return &this
}

// GetFailureCategory returns the FailureCategory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpsertProductCategoriesResponse) GetFailureCategory() []ProductCategory {
	if o == nil {
		var ret []ProductCategory
		return ret
	}
	return o.FailureCategory
}

// GetFailureCategoryOk returns a tuple with the FailureCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpsertProductCategoriesResponse) GetFailureCategoryOk() ([]ProductCategory, bool) {
	if o == nil || IsNil(o.FailureCategory) {
		return nil, false
	}
	return o.FailureCategory, true
}

// HasFailureCategory returns a boolean if a field has been set.
func (o *UpsertProductCategoriesResponse) HasFailureCategory() bool {
	if o != nil && IsNil(o.FailureCategory) {
		return true
	}

	return false
}

// SetFailureCategory gets a reference to the given []ProductCategory and assigns it to the FailureCategory field.
func (o *UpsertProductCategoriesResponse) SetFailureCategory(v []ProductCategory) {
	o.FailureCategory = v
}

// GetTotalFailureCategory returns the TotalFailureCategory field value if set, zero value otherwise.
func (o *UpsertProductCategoriesResponse) GetTotalFailureCategory() int32 {
	if o == nil || IsNil(o.TotalFailureCategory) {
		var ret int32
		return ret
	}
	return *o.TotalFailureCategory
}

// GetTotalFailureCategoryOk returns a tuple with the TotalFailureCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsertProductCategoriesResponse) GetTotalFailureCategoryOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalFailureCategory) {
		return nil, false
	}
	return o.TotalFailureCategory, true
}

// HasTotalFailureCategory returns a boolean if a field has been set.
func (o *UpsertProductCategoriesResponse) HasTotalFailureCategory() bool {
	if o != nil && !IsNil(o.TotalFailureCategory) {
		return true
	}

	return false
}

// SetTotalFailureCategory gets a reference to the given int32 and assigns it to the TotalFailureCategory field.
func (o *UpsertProductCategoriesResponse) SetTotalFailureCategory(v int32) {
	o.TotalFailureCategory = &v
}

// GetTotalSuccessCategory returns the TotalSuccessCategory field value if set, zero value otherwise.
func (o *UpsertProductCategoriesResponse) GetTotalSuccessCategory() int32 {
	if o == nil || IsNil(o.TotalSuccessCategory) {
		var ret int32
		return ret
	}
	return *o.TotalSuccessCategory
}

// GetTotalSuccessCategoryOk returns a tuple with the TotalSuccessCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsertProductCategoriesResponse) GetTotalSuccessCategoryOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalSuccessCategory) {
		return nil, false
	}
	return o.TotalSuccessCategory, true
}

// HasTotalSuccessCategory returns a boolean if a field has been set.
func (o *UpsertProductCategoriesResponse) HasTotalSuccessCategory() bool {
	if o != nil && !IsNil(o.TotalSuccessCategory) {
		return true
	}

	return false
}

// SetTotalSuccessCategory gets a reference to the given int32 and assigns it to the TotalSuccessCategory field.
func (o *UpsertProductCategoriesResponse) SetTotalSuccessCategory(v int32) {
	o.TotalSuccessCategory = &v
}

// GetTotalCategory returns the TotalCategory field value if set, zero value otherwise.
func (o *UpsertProductCategoriesResponse) GetTotalCategory() int32 {
	if o == nil || IsNil(o.TotalCategory) {
		var ret int32
		return ret
	}
	return *o.TotalCategory
}

// GetTotalCategoryOk returns a tuple with the TotalCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpsertProductCategoriesResponse) GetTotalCategoryOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalCategory) {
		return nil, false
	}
	return o.TotalCategory, true
}

// HasTotalCategory returns a boolean if a field has been set.
func (o *UpsertProductCategoriesResponse) HasTotalCategory() bool {
	if o != nil && !IsNil(o.TotalCategory) {
		return true
	}

	return false
}

// SetTotalCategory gets a reference to the given int32 and assigns it to the TotalCategory field.
func (o *UpsertProductCategoriesResponse) SetTotalCategory(v int32) {
	o.TotalCategory = &v
}

func (o UpsertProductCategoriesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpsertProductCategoriesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.FailureCategory != nil {
		toSerialize["failure_category"] = o.FailureCategory
	}
	if !IsNil(o.TotalFailureCategory) {
		toSerialize["total_failure_category"] = o.TotalFailureCategory
	}
	if !IsNil(o.TotalSuccessCategory) {
		toSerialize["total_success_category"] = o.TotalSuccessCategory
	}
	if !IsNil(o.TotalCategory) {
		toSerialize["total_category"] = o.TotalCategory
	}
	return toSerialize, nil
}

type NullableUpsertProductCategoriesResponse struct {
	value *UpsertProductCategoriesResponse
	isSet bool
}

func (v NullableUpsertProductCategoriesResponse) Get() *UpsertProductCategoriesResponse {
	return v.value
}

func (v *NullableUpsertProductCategoriesResponse) Set(val *UpsertProductCategoriesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpsertProductCategoriesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpsertProductCategoriesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpsertProductCategoriesResponse(val *UpsertProductCategoriesResponse) *NullableUpsertProductCategoriesResponse {
	return &NullableUpsertProductCategoriesResponse{value: val, isSet: true}
}

func (v NullableUpsertProductCategoriesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpsertProductCategoriesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


