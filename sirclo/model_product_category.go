/*
SIRCLO Open API

SIRCLO Open API

API version: 1.0.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sirclo

import (
	"encoding/json"
)

// checks if the ProductCategory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductCategory{}

// ProductCategory struct for ProductCategory
type ProductCategory struct {
	CategoryId *string `json:"category_id,omitempty"`
	Attribute []ProductCategoryAttribute `json:"attribute,omitempty"`
	Message *string `json:"message,omitempty"`
}

// NewProductCategory instantiates a new ProductCategory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductCategory() *ProductCategory {
	this := ProductCategory{}
	return &this
}

// NewProductCategoryWithDefaults instantiates a new ProductCategory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductCategoryWithDefaults() *ProductCategory {
	this := ProductCategory{}
	return &this
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *ProductCategory) GetCategoryId() string {
	if o == nil || IsNil(o.CategoryId) {
		var ret string
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductCategory) GetCategoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryId) {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *ProductCategory) HasCategoryId() bool {
	if o != nil && !IsNil(o.CategoryId) {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given string and assigns it to the CategoryId field.
func (o *ProductCategory) SetCategoryId(v string) {
	o.CategoryId = &v
}

// GetAttribute returns the Attribute field value if set, zero value otherwise.
func (o *ProductCategory) GetAttribute() []ProductCategoryAttribute {
	if o == nil || IsNil(o.Attribute) {
		var ret []ProductCategoryAttribute
		return ret
	}
	return o.Attribute
}

// GetAttributeOk returns a tuple with the Attribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductCategory) GetAttributeOk() ([]ProductCategoryAttribute, bool) {
	if o == nil || IsNil(o.Attribute) {
		return nil, false
	}
	return o.Attribute, true
}

// HasAttribute returns a boolean if a field has been set.
func (o *ProductCategory) HasAttribute() bool {
	if o != nil && !IsNil(o.Attribute) {
		return true
	}

	return false
}

// SetAttribute gets a reference to the given []ProductCategoryAttribute and assigns it to the Attribute field.
func (o *ProductCategory) SetAttribute(v []ProductCategoryAttribute) {
	o.Attribute = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ProductCategory) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductCategory) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ProductCategory) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ProductCategory) SetMessage(v string) {
	o.Message = &v
}

func (o ProductCategory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductCategory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CategoryId) {
		toSerialize["category_id"] = o.CategoryId
	}
	if !IsNil(o.Attribute) {
		toSerialize["attribute"] = o.Attribute
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

type NullableProductCategory struct {
	value *ProductCategory
	isSet bool
}

func (v NullableProductCategory) Get() *ProductCategory {
	return v.value
}

func (v *NullableProductCategory) Set(val *ProductCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableProductCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableProductCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductCategory(val *ProductCategory) *NullableProductCategory {
	return &NullableProductCategory{value: val, isSet: true}
}

func (v NullableProductCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


