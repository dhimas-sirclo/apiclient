/*
SIRCLO Open API

SIRCLO Open API

API version: 1.0.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sirclo

import (
	"encoding/json"
)

// checks if the VolumeInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeInput{}

// VolumeInput struct for VolumeInput
type VolumeInput struct {
	Height NullableFloat64 `json:"height"`
	Length NullableFloat64 `json:"length"`
	Width NullableFloat64 `json:"width"`
}

// NewVolumeInput instantiates a new VolumeInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeInput(height NullableFloat64, length NullableFloat64, width NullableFloat64) *VolumeInput {
	this := VolumeInput{}
	this.Height = height
	this.Length = length
	this.Width = width
	return &this
}

// NewVolumeInputWithDefaults instantiates a new VolumeInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeInputWithDefaults() *VolumeInput {
	this := VolumeInput{}
	return &this
}

// GetHeight returns the Height field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *VolumeInput) GetHeight() float64 {
	if o == nil || o.Height.Get() == nil {
		var ret float64
		return ret
	}

	return *o.Height.Get()
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInput) GetHeightOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Height.Get(), o.Height.IsSet()
}

// SetHeight sets field value
func (o *VolumeInput) SetHeight(v float64) {
	o.Height.Set(&v)
}

// GetLength returns the Length field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *VolumeInput) GetLength() float64 {
	if o == nil || o.Length.Get() == nil {
		var ret float64
		return ret
	}

	return *o.Length.Get()
}

// GetLengthOk returns a tuple with the Length field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInput) GetLengthOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Length.Get(), o.Length.IsSet()
}

// SetLength sets field value
func (o *VolumeInput) SetLength(v float64) {
	o.Length.Set(&v)
}

// GetWidth returns the Width field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *VolumeInput) GetWidth() float64 {
	if o == nil || o.Width.Get() == nil {
		var ret float64
		return ret
	}

	return *o.Width.Get()
}

// GetWidthOk returns a tuple with the Width field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInput) GetWidthOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Width.Get(), o.Width.IsSet()
}

// SetWidth sets field value
func (o *VolumeInput) SetWidth(v float64) {
	o.Width.Set(&v)
}

func (o VolumeInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["height"] = o.Height.Get()
	toSerialize["length"] = o.Length.Get()
	toSerialize["width"] = o.Width.Get()
	return toSerialize, nil
}

type NullableVolumeInput struct {
	value *VolumeInput
	isSet bool
}

func (v NullableVolumeInput) Get() *VolumeInput {
	return v.value
}

func (v *NullableVolumeInput) Set(val *VolumeInput) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeInput) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeInput(val *VolumeInput) *NullableVolumeInput {
	return &NullableVolumeInput{value: val, isSet: true}
}

func (v NullableVolumeInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


