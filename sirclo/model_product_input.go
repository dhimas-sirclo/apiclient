/*
SIRCLO Open API

SIRCLO Open API

API version: 1.0.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sirclo

import (
	"encoding/json"
)

// checks if the ProductInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductInput{}

// ProductInput struct for ProductInput
type ProductInput struct {
	Type string `json:"type"`
	Name string `json:"name"`
	Brand string `json:"brand"`
	ProductId string `json:"product_id"`
	ProductCode string `json:"product_code"`
	ProductDescription string `json:"product_description"`
	Condition string `json:"condition"`
	ShopId string `json:"shop_id"`
	CategoryId string `json:"category_id"`
	CategoryName string `json:"category_name"`
	Variants []VariantInput `json:"variants"`
}

// NewProductInput instantiates a new ProductInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductInput(type_ string, name string, brand string, productId string, productCode string, productDescription string, condition string, shopId string, categoryId string, categoryName string, variants []VariantInput) *ProductInput {
	this := ProductInput{}
	this.Type = type_
	this.Name = name
	this.Brand = brand
	this.ProductId = productId
	this.ProductCode = productCode
	this.ProductDescription = productDescription
	this.Condition = condition
	this.ShopId = shopId
	this.CategoryId = categoryId
	this.CategoryName = categoryName
	this.Variants = variants
	return &this
}

// NewProductInputWithDefaults instantiates a new ProductInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductInputWithDefaults() *ProductInput {
	this := ProductInput{}
	return &this
}

// GetType returns the Type field value
func (o *ProductInput) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ProductInput) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ProductInput) SetType(v string) {
	o.Type = v
}

// GetName returns the Name field value
func (o *ProductInput) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProductInput) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProductInput) SetName(v string) {
	o.Name = v
}

// GetBrand returns the Brand field value
func (o *ProductInput) GetBrand() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Brand
}

// GetBrandOk returns a tuple with the Brand field value
// and a boolean to check if the value has been set.
func (o *ProductInput) GetBrandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Brand, true
}

// SetBrand sets field value
func (o *ProductInput) SetBrand(v string) {
	o.Brand = v
}

// GetProductId returns the ProductId field value
func (o *ProductInput) GetProductId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value
// and a boolean to check if the value has been set.
func (o *ProductInput) GetProductIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductId, true
}

// SetProductId sets field value
func (o *ProductInput) SetProductId(v string) {
	o.ProductId = v
}

// GetProductCode returns the ProductCode field value
func (o *ProductInput) GetProductCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductCode
}

// GetProductCodeOk returns a tuple with the ProductCode field value
// and a boolean to check if the value has been set.
func (o *ProductInput) GetProductCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductCode, true
}

// SetProductCode sets field value
func (o *ProductInput) SetProductCode(v string) {
	o.ProductCode = v
}

// GetProductDescription returns the ProductDescription field value
func (o *ProductInput) GetProductDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductDescription
}

// GetProductDescriptionOk returns a tuple with the ProductDescription field value
// and a boolean to check if the value has been set.
func (o *ProductInput) GetProductDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductDescription, true
}

// SetProductDescription sets field value
func (o *ProductInput) SetProductDescription(v string) {
	o.ProductDescription = v
}

// GetCondition returns the Condition field value
func (o *ProductInput) GetCondition() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Condition
}

// GetConditionOk returns a tuple with the Condition field value
// and a boolean to check if the value has been set.
func (o *ProductInput) GetConditionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Condition, true
}

// SetCondition sets field value
func (o *ProductInput) SetCondition(v string) {
	o.Condition = v
}

// GetShopId returns the ShopId field value
func (o *ProductInput) GetShopId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShopId
}

// GetShopIdOk returns a tuple with the ShopId field value
// and a boolean to check if the value has been set.
func (o *ProductInput) GetShopIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShopId, true
}

// SetShopId sets field value
func (o *ProductInput) SetShopId(v string) {
	o.ShopId = v
}

// GetCategoryId returns the CategoryId field value
func (o *ProductInput) GetCategoryId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value
// and a boolean to check if the value has been set.
func (o *ProductInput) GetCategoryIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CategoryId, true
}

// SetCategoryId sets field value
func (o *ProductInput) SetCategoryId(v string) {
	o.CategoryId = v
}

// GetCategoryName returns the CategoryName field value
func (o *ProductInput) GetCategoryName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CategoryName
}

// GetCategoryNameOk returns a tuple with the CategoryName field value
// and a boolean to check if the value has been set.
func (o *ProductInput) GetCategoryNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CategoryName, true
}

// SetCategoryName sets field value
func (o *ProductInput) SetCategoryName(v string) {
	o.CategoryName = v
}

// GetVariants returns the Variants field value
func (o *ProductInput) GetVariants() []VariantInput {
	if o == nil {
		var ret []VariantInput
		return ret
	}

	return o.Variants
}

// GetVariantsOk returns a tuple with the Variants field value
// and a boolean to check if the value has been set.
func (o *ProductInput) GetVariantsOk() ([]VariantInput, bool) {
	if o == nil {
		return nil, false
	}
	return o.Variants, true
}

// SetVariants sets field value
func (o *ProductInput) SetVariants(v []VariantInput) {
	o.Variants = v
}

func (o ProductInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["name"] = o.Name
	toSerialize["brand"] = o.Brand
	toSerialize["product_id"] = o.ProductId
	toSerialize["product_code"] = o.ProductCode
	toSerialize["product_description"] = o.ProductDescription
	toSerialize["condition"] = o.Condition
	toSerialize["shop_id"] = o.ShopId
	toSerialize["category_id"] = o.CategoryId
	toSerialize["category_name"] = o.CategoryName
	toSerialize["variants"] = o.Variants
	return toSerialize, nil
}

type NullableProductInput struct {
	value *ProductInput
	isSet bool
}

func (v NullableProductInput) Get() *ProductInput {
	return v.value
}

func (v *NullableProductInput) Set(val *ProductInput) {
	v.value = val
	v.isSet = true
}

func (v NullableProductInput) IsSet() bool {
	return v.isSet
}

func (v *NullableProductInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductInput(val *ProductInput) *NullableProductInput {
	return &NullableProductInput{value: val, isSet: true}
}

func (v NullableProductInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


