/*
SIRCLO Open API

SIRCLO Open API

API version: 1.0.0
Contact: dev@sirclo.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sirclo

import (
	"encoding/json"
)

// checks if the LineItemInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LineItemInput{}

// LineItemInput struct for LineItemInput
type LineItemInput struct {
	OrderItemId string `json:"order_item_id"`
	Sku string `json:"sku"`
	ProductName string `json:"product_name"`
	OrderQuantity int32 `json:"order_quantity"`
	RawPrice float64 `json:"raw_price"`
	DiscountAmount NullableFloat64 `json:"discount_amount,omitempty"`
	LineTax float64 `json:"line_tax"`
	ShippingAmount NullableFloat64 `json:"shipping_amount,omitempty"`
	Promo float64 `json:"promo"`
	Voucher float64 `json:"voucher"`
	LineTotal float64 `json:"line_total"`
	LineComments *string `json:"line_comments,omitempty"`
}

// NewLineItemInput instantiates a new LineItemInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLineItemInput(orderItemId string, sku string, productName string, orderQuantity int32, rawPrice float64, lineTax float64, promo float64, voucher float64, lineTotal float64) *LineItemInput {
	this := LineItemInput{}
	this.OrderItemId = orderItemId
	this.Sku = sku
	this.ProductName = productName
	this.OrderQuantity = orderQuantity
	this.RawPrice = rawPrice
	this.LineTax = lineTax
	this.Promo = promo
	this.Voucher = voucher
	this.LineTotal = lineTotal
	return &this
}

// NewLineItemInputWithDefaults instantiates a new LineItemInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLineItemInputWithDefaults() *LineItemInput {
	this := LineItemInput{}
	return &this
}

// GetOrderItemId returns the OrderItemId field value
func (o *LineItemInput) GetOrderItemId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrderItemId
}

// GetOrderItemIdOk returns a tuple with the OrderItemId field value
// and a boolean to check if the value has been set.
func (o *LineItemInput) GetOrderItemIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderItemId, true
}

// SetOrderItemId sets field value
func (o *LineItemInput) SetOrderItemId(v string) {
	o.OrderItemId = v
}

// GetSku returns the Sku field value
func (o *LineItemInput) GetSku() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sku
}

// GetSkuOk returns a tuple with the Sku field value
// and a boolean to check if the value has been set.
func (o *LineItemInput) GetSkuOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sku, true
}

// SetSku sets field value
func (o *LineItemInput) SetSku(v string) {
	o.Sku = v
}

// GetProductName returns the ProductName field value
func (o *LineItemInput) GetProductName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductName
}

// GetProductNameOk returns a tuple with the ProductName field value
// and a boolean to check if the value has been set.
func (o *LineItemInput) GetProductNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductName, true
}

// SetProductName sets field value
func (o *LineItemInput) SetProductName(v string) {
	o.ProductName = v
}

// GetOrderQuantity returns the OrderQuantity field value
func (o *LineItemInput) GetOrderQuantity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OrderQuantity
}

// GetOrderQuantityOk returns a tuple with the OrderQuantity field value
// and a boolean to check if the value has been set.
func (o *LineItemInput) GetOrderQuantityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderQuantity, true
}

// SetOrderQuantity sets field value
func (o *LineItemInput) SetOrderQuantity(v int32) {
	o.OrderQuantity = v
}

// GetRawPrice returns the RawPrice field value
func (o *LineItemInput) GetRawPrice() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.RawPrice
}

// GetRawPriceOk returns a tuple with the RawPrice field value
// and a boolean to check if the value has been set.
func (o *LineItemInput) GetRawPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RawPrice, true
}

// SetRawPrice sets field value
func (o *LineItemInput) SetRawPrice(v float64) {
	o.RawPrice = v
}

// GetDiscountAmount returns the DiscountAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LineItemInput) GetDiscountAmount() float64 {
	if o == nil || IsNil(o.DiscountAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.DiscountAmount.Get()
}

// GetDiscountAmountOk returns a tuple with the DiscountAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LineItemInput) GetDiscountAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiscountAmount.Get(), o.DiscountAmount.IsSet()
}

// HasDiscountAmount returns a boolean if a field has been set.
func (o *LineItemInput) HasDiscountAmount() bool {
	if o != nil && o.DiscountAmount.IsSet() {
		return true
	}

	return false
}

// SetDiscountAmount gets a reference to the given NullableFloat64 and assigns it to the DiscountAmount field.
func (o *LineItemInput) SetDiscountAmount(v float64) {
	o.DiscountAmount.Set(&v)
}
// SetDiscountAmountNil sets the value for DiscountAmount to be an explicit nil
func (o *LineItemInput) SetDiscountAmountNil() {
	o.DiscountAmount.Set(nil)
}

// UnsetDiscountAmount ensures that no value is present for DiscountAmount, not even an explicit nil
func (o *LineItemInput) UnsetDiscountAmount() {
	o.DiscountAmount.Unset()
}

// GetLineTax returns the LineTax field value
func (o *LineItemInput) GetLineTax() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.LineTax
}

// GetLineTaxOk returns a tuple with the LineTax field value
// and a boolean to check if the value has been set.
func (o *LineItemInput) GetLineTaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LineTax, true
}

// SetLineTax sets field value
func (o *LineItemInput) SetLineTax(v float64) {
	o.LineTax = v
}

// GetShippingAmount returns the ShippingAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LineItemInput) GetShippingAmount() float64 {
	if o == nil || IsNil(o.ShippingAmount.Get()) {
		var ret float64
		return ret
	}
	return *o.ShippingAmount.Get()
}

// GetShippingAmountOk returns a tuple with the ShippingAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LineItemInput) GetShippingAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShippingAmount.Get(), o.ShippingAmount.IsSet()
}

// HasShippingAmount returns a boolean if a field has been set.
func (o *LineItemInput) HasShippingAmount() bool {
	if o != nil && o.ShippingAmount.IsSet() {
		return true
	}

	return false
}

// SetShippingAmount gets a reference to the given NullableFloat64 and assigns it to the ShippingAmount field.
func (o *LineItemInput) SetShippingAmount(v float64) {
	o.ShippingAmount.Set(&v)
}
// SetShippingAmountNil sets the value for ShippingAmount to be an explicit nil
func (o *LineItemInput) SetShippingAmountNil() {
	o.ShippingAmount.Set(nil)
}

// UnsetShippingAmount ensures that no value is present for ShippingAmount, not even an explicit nil
func (o *LineItemInput) UnsetShippingAmount() {
	o.ShippingAmount.Unset()
}

// GetPromo returns the Promo field value
func (o *LineItemInput) GetPromo() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Promo
}

// GetPromoOk returns a tuple with the Promo field value
// and a boolean to check if the value has been set.
func (o *LineItemInput) GetPromoOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Promo, true
}

// SetPromo sets field value
func (o *LineItemInput) SetPromo(v float64) {
	o.Promo = v
}

// GetVoucher returns the Voucher field value
func (o *LineItemInput) GetVoucher() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Voucher
}

// GetVoucherOk returns a tuple with the Voucher field value
// and a boolean to check if the value has been set.
func (o *LineItemInput) GetVoucherOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Voucher, true
}

// SetVoucher sets field value
func (o *LineItemInput) SetVoucher(v float64) {
	o.Voucher = v
}

// GetLineTotal returns the LineTotal field value
func (o *LineItemInput) GetLineTotal() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.LineTotal
}

// GetLineTotalOk returns a tuple with the LineTotal field value
// and a boolean to check if the value has been set.
func (o *LineItemInput) GetLineTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LineTotal, true
}

// SetLineTotal sets field value
func (o *LineItemInput) SetLineTotal(v float64) {
	o.LineTotal = v
}

// GetLineComments returns the LineComments field value if set, zero value otherwise.
func (o *LineItemInput) GetLineComments() string {
	if o == nil || IsNil(o.LineComments) {
		var ret string
		return ret
	}
	return *o.LineComments
}

// GetLineCommentsOk returns a tuple with the LineComments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LineItemInput) GetLineCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.LineComments) {
		return nil, false
	}
	return o.LineComments, true
}

// HasLineComments returns a boolean if a field has been set.
func (o *LineItemInput) HasLineComments() bool {
	if o != nil && !IsNil(o.LineComments) {
		return true
	}

	return false
}

// SetLineComments gets a reference to the given string and assigns it to the LineComments field.
func (o *LineItemInput) SetLineComments(v string) {
	o.LineComments = &v
}

func (o LineItemInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LineItemInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["order_item_id"] = o.OrderItemId
	toSerialize["sku"] = o.Sku
	toSerialize["product_name"] = o.ProductName
	toSerialize["order_quantity"] = o.OrderQuantity
	toSerialize["raw_price"] = o.RawPrice
	if o.DiscountAmount.IsSet() {
		toSerialize["discount_amount"] = o.DiscountAmount.Get()
	}
	toSerialize["line_tax"] = o.LineTax
	if o.ShippingAmount.IsSet() {
		toSerialize["shipping_amount"] = o.ShippingAmount.Get()
	}
	toSerialize["promo"] = o.Promo
	toSerialize["voucher"] = o.Voucher
	toSerialize["line_total"] = o.LineTotal
	if !IsNil(o.LineComments) {
		toSerialize["line_comments"] = o.LineComments
	}
	return toSerialize, nil
}

type NullableLineItemInput struct {
	value *LineItemInput
	isSet bool
}

func (v NullableLineItemInput) Get() *LineItemInput {
	return v.value
}

func (v *NullableLineItemInput) Set(val *LineItemInput) {
	v.value = val
	v.isSet = true
}

func (v NullableLineItemInput) IsSet() bool {
	return v.isSet
}

func (v *NullableLineItemInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLineItemInput(val *LineItemInput) *NullableLineItemInput {
	return &NullableLineItemInput{value: val, isSet: true}
}

func (v NullableLineItemInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLineItemInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


